{"code":"(window.webpackJsonp_N_E=window.webpackJsonp_N_E||[]).push([[8],{\"Uvq/\":function(t,e,r){\"use strict\";r.d(e,\"a\",(function(){return m}));var n=r(\"wx14\"),s=r(\"dI71\"),i=r(\"q/uT\"),u=r(\"GBAL\"),o=r(\"Yyzc\"),a=r(\"S6zn\"),c=r(\"G8/n\"),l=function(t){function e(e,r){var n;return(n=t.call(this)||this).client=e,n.options=r,n.trackedProps=[],n.previousSelectError=null,n.bindMethods(),n.setOptions(r),n}Object(s.a)(e,t);var r=e.prototype;return r.bindMethods=function(){this.remove=this.remove.bind(this),this.refetch=this.refetch.bind(this)},r.onSubscribe=function(){1===this.listeners.length&&(this.currentQuery.addObserver(this),h(this.currentQuery,this.options)&&this.executeFetch(),this.updateTimers())},r.onUnsubscribe=function(){this.listeners.length||this.destroy()},r.shouldFetchOnReconnect=function(){return t=this.currentQuery,!1!==(e=this.options).enabled&&(\"always\"===e.refetchOnReconnect||!1!==e.refetchOnReconnect&&f(t,e));var t,e},r.shouldFetchOnWindowFocus=function(){return t=this.currentQuery,!1!==(e=this.options).enabled&&(\"always\"===e.refetchOnWindowFocus||!1!==e.refetchOnWindowFocus&&f(t,e));var t,e},r.destroy=function(){this.listeners=[],this.clearTimers(),this.currentQuery.removeObserver(this)},r.setOptions=function(t,e){var r=this.options,n=this.currentQuery;if(this.options=this.client.defaultQueryObserverOptions(t),\"undefined\"!==typeof this.options.enabled&&\"boolean\"!==typeof this.options.enabled)throw new Error(\"Expected enabled to be a boolean\");this.options.queryKey||(this.options.queryKey=r.queryKey),this.updateQuery();var s=this.hasListeners();s&&d(this.currentQuery,n,this.options,r)&&this.executeFetch(),this.updateResult(e),!s||this.currentQuery===n&&this.options.enabled===r.enabled&&this.options.staleTime===r.staleTime||this.updateStaleTimeout(),!s||this.currentQuery===n&&this.options.enabled===r.enabled&&this.options.refetchInterval===r.refetchInterval||this.updateRefetchInterval()},r.getOptimisticResult=function(t){var e=this.client.defaultQueryObserverOptions(t),r=this.client.getQueryCache().build(this.client,e);return this.createResult(r,e)},r.getCurrentResult=function(){return this.currentResult},r.trackResult=function(t){var e=this,r={};return Object.keys(t).forEach((function(n){Object.defineProperty(r,n,{configurable:!1,enumerable:!0,get:function(){var r=n;return e.trackedProps.includes(r)||e.trackedProps.push(r),t[r]}})})),r},r.getNextResult=function(t){var e=this;return new Promise((function(r,n){var s=e.subscribe((function(e){e.isFetching||(s(),e.isError&&(null==t?void 0:t.throwOnError)?n(e.error):r(e))}))}))},r.getCurrentQuery=function(){return this.currentQuery},r.remove=function(){this.client.getQueryCache().remove(this.currentQuery)},r.refetch=function(t){return this.fetch(t)},r.fetchOptimistic=function(t){var e=this,r=this.client.defaultQueryObserverOptions(t),n=this.client.getQueryCache().build(this.client,r);return n.fetch().then((function(){return e.createResult(n,r)}))},r.fetch=function(t){var e=this;return this.executeFetch(t).then((function(){return e.updateResult(),e.currentResult}))},r.executeFetch=function(t){this.updateQuery();var e=this.currentQuery.fetch(this.options,t);return(null==t?void 0:t.throwOnError)||(e=e.catch(i.i)),e},r.updateStaleTimeout=function(){var t=this;if(this.clearStaleTimeout(),!i.e&&!this.currentResult.isStale&&Object(i.f)(this.options.staleTime)){var e=Object(i.r)(this.currentResult.dataUpdatedAt,this.options.staleTime)+1;this.staleTimeoutId=setTimeout((function(){t.currentResult.isStale||t.updateResult()}),e)}},r.updateRefetchInterval=function(){var t=this;this.clearRefetchInterval(),!i.e&&!1!==this.options.enabled&&Object(i.f)(this.options.refetchInterval)&&(this.refetchIntervalId=setInterval((function(){(t.options.refetchIntervalInBackground||o.a.isFocused())&&t.executeFetch()}),this.options.refetchInterval))},r.updateTimers=function(){this.updateStaleTimeout(),this.updateRefetchInterval()},r.clearTimers=function(){this.clearStaleTimeout(),this.clearRefetchInterval()},r.clearStaleTimeout=function(){clearTimeout(this.staleTimeoutId),this.staleTimeoutId=void 0},r.clearRefetchInterval=function(){clearInterval(this.refetchIntervalId),this.refetchIntervalId=void 0},r.createResult=function(t,e){var r,n,s=this.currentQuery,u=this.options,o=this.currentResult,a=this.currentResultState,l=this.currentResultOptions,p=t!==s,v=p?t.state:this.currentQueryInitialState,y=p?this.currentResult:this.previousQueryResult,b=t.state,R=b.dataUpdatedAt,O=b.error,m=b.errorUpdatedAt,S=b.isFetching,Q=b.status,E=!1,g=!1;if(e.optimisticResults){var I=this.hasListeners(),C=!I&&h(t,e),T=I&&d(t,s,e,u);(C||T)&&(S=!0,R||(Q=\"loading\"))}if(e.keepPreviousData&&!b.dataUpdateCount&&(null==y?void 0:y.isSuccess)&&\"error\"!==Q)r=y.data,R=y.dataUpdatedAt,Q=y.status,E=!0;else if(e.select&&\"undefined\"!==typeof b.data)if(o&&b.data===(null==a?void 0:a.data)&&e.select===(null==l?void 0:l.select)&&!this.previousSelectError)r=o.data;else try{r=e.select(b.data),!1!==e.structuralSharing&&(r=Object(i.n)(null==o?void 0:o.data,r)),this.previousSelectError=null}catch(w){Object(c.a)().error(w),O=w,this.previousSelectError=w,m=Date.now(),Q=\"error\"}else r=b.data;\"undefined\"!==typeof e.placeholderData&&\"undefined\"===typeof r&&\"loading\"===Q&&(\"undefined\"!==typeof(n=(null==o?void 0:o.isPlaceholderData)&&e.placeholderData===(null==l?void 0:l.placeholderData)?o.data:\"function\"===typeof e.placeholderData?e.placeholderData():e.placeholderData)&&(Q=\"success\",r=n,g=!0));return{status:Q,isLoading:\"loading\"===Q,isSuccess:\"success\"===Q,isError:\"error\"===Q,isIdle:\"idle\"===Q,data:r,dataUpdatedAt:R,error:O,errorUpdatedAt:m,failureCount:b.fetchFailureCount,isFetched:b.dataUpdateCount>0||b.errorUpdateCount>0,isFetchedAfterMount:b.dataUpdateCount>v.dataUpdateCount||b.errorUpdateCount>v.errorUpdateCount,isFetching:S,isLoadingError:\"error\"===Q&&0===b.dataUpdatedAt,isPlaceholderData:g,isPreviousData:E,isRefetchError:\"error\"===Q&&0!==b.dataUpdatedAt,isStale:f(t,e),refetch:this.refetch,remove:this.remove}},r.shouldNotifyListeners=function(t,e){if(!e)return!0;if(t===e)return!1;var r=this.options,n=r.notifyOnChangeProps,s=r.notifyOnChangePropsExclusions;if(!n&&!s)return!0;if(\"tracked\"===n&&!this.trackedProps.length)return!0;var i=\"tracked\"===n?this.trackedProps:n;return Object.keys(t).some((function(r){var n=r,u=t[n]!==e[n],o=null==i?void 0:i.some((function(t){return t===r})),a=null==s?void 0:s.some((function(t){return t===r}));return u&&!a&&(!i||o)}))},r.updateResult=function(t){var e=this.currentResult;if(this.currentResult=this.createResult(this.currentQuery,this.options),this.currentResultState=this.currentQuery.state,this.currentResultOptions=this.options,!Object(i.p)(this.currentResult,e)){var r={cache:!0};!1!==(null==t?void 0:t.listeners)&&this.shouldNotifyListeners(this.currentResult,e)&&(r.listeners=!0),this.notify(Object(n.a)({},r,t))}},r.updateQuery=function(){var t=this.client.getQueryCache().build(this.client,this.options);if(t!==this.currentQuery){var e=this.currentQuery;this.currentQuery=t,this.currentQueryInitialState=t.state,this.previousQueryResult=this.currentResult,this.hasListeners()&&(null==e||e.removeObserver(this),t.addObserver(this))}},r.onQueryUpdate=function(t){var e={};\"success\"===t.type?e.onSuccess=!0:\"error\"===t.type&&(e.onError=!0),this.updateResult(e),this.hasListeners()&&this.updateTimers()},r.notify=function(t){var e=this;u.a.batch((function(){t.onSuccess?(null==e.options.onSuccess||e.options.onSuccess(e.currentResult.data),null==e.options.onSettled||e.options.onSettled(e.currentResult.data,null)):t.onError&&(null==e.options.onError||e.options.onError(e.currentResult.error),null==e.options.onSettled||e.options.onSettled(void 0,e.currentResult.error)),t.listeners&&e.listeners.forEach((function(t){t(e.currentResult)})),t.cache&&e.client.getQueryCache().notify({query:e.currentQuery,type:\"observerResultsUpdated\"})}))},e}(a.a);function h(t,e){return function(t,e){return!1!==e.enabled&&!t.state.dataUpdatedAt&&!(\"error\"===t.state.status&&!1===e.retryOnMount)}(t,e)||function(t,e){return!1!==e.enabled&&t.state.dataUpdatedAt>0&&(\"always\"===e.refetchOnMount||!1!==e.refetchOnMount&&f(t,e))}(t,e)}function d(t,e,r,n){return!1!==r.enabled&&(t!==e||!1===n.enabled)&&f(t,r)}function f(t,e){return t.isStaleByTime(e.staleTime)}var p=r(\"q1tI\"),v=r.n(p);function y(){var t=!1;return{clearReset:function(){t=!1},reset:function(){t=!0},isReset:function(){return t}}}var b=v.a.createContext(y()),R=r(\"+QN0\");function O(t,e){var r=v.a.useRef(!1),n=v.a.useState(0)[1],s=Object(R.b)(),i=v.a.useContext(b),o=s.defaultQueryObserverOptions(t);o.optimisticResults=!0,o.onError&&(o.onError=u.a.batchCalls(o.onError)),o.onSuccess&&(o.onSuccess=u.a.batchCalls(o.onSuccess)),o.onSettled&&(o.onSettled=u.a.batchCalls(o.onSettled)),o.suspense&&\"number\"!==typeof o.staleTime&&(o.staleTime=1e3),(o.suspense||o.useErrorBoundary)&&(i.isReset()||(o.retryOnMount=!1));var a=v.a.useRef();a.current||(a.current=new e(s,o));var c=a.current.getOptimisticResult(o);if(v.a.useEffect((function(){r.current=!0,i.clearReset();var t=a.current.subscribe(u.a.batchCalls((function(){r.current&&n((function(t){return t+1}))})));return a.current.updateResult(),function(){r.current=!1,t()}}),[i]),v.a.useEffect((function(){a.current.setOptions(o,{listeners:!1})}),[o]),o.suspense&&c.isLoading)throw a.current.fetchOptimistic(o).then((function(t){var e=t.data;null==o.onSuccess||o.onSuccess(e),null==o.onSettled||o.onSettled(e,null)})).catch((function(t){i.clearReset(),null==o.onError||o.onError(t),null==o.onSettled||o.onSettled(void 0,t)}));if((o.suspense||o.useErrorBoundary)&&c.isError)throw c.error;return\"tracked\"===o.notifyOnChangeProps&&(c=a.current.trackResult(c)),c}function m(t,e,r){return O(Object(i.l)(t,e,r),l)}}}]);","map":{"version":3,"sources":["static/chunks/7166d59e8c46d6d66f1177e95ab33921ec7d3605.0bea7acec8c6a9e3b0fc.js"],"names":["window","push","Uvq/","module","__webpack_exports__","__webpack_require__","d","useQuery","esm_extends","inheritsLoose","utils","notifyManager","focusManager","subscribable","logger","queryObserver_QueryObserver","_Subscribable","QueryObserver","client","options","_this","call","this","trackedProps","previousSelectError","bindMethods","setOptions","Object","_proto","prototype","remove","bind","refetch","onSubscribe","listeners","length","currentQuery","addObserver","shouldFetchOnMount","executeFetch","updateTimers","onUnsubscribe","destroy","shouldFetchOnReconnect","query","enabled","refetchOnReconnect","isStale","shouldFetchOnWindowFocus","refetchOnWindowFocus","clearTimers","removeObserver","notifyOptions","prevOptions","prevQuery","defaultQueryObserverOptions","Error","queryKey","updateQuery","mounted","hasListeners","shouldFetchOptionally","updateResult","staleTime","updateStaleTimeout","refetchInterval","updateRefetchInterval","getOptimisticResult","defaultedOptions","getQueryCache","build","createResult","getCurrentResult","currentResult","trackResult","result","_this2","trackedResult","keys","forEach","key","defineProperty","configurable","enumerable","get","typedKey","includes","getNextResult","_this3","Promise","resolve","reject","unsubscribe","subscribe","isFetching","isError","throwOnError","error","getCurrentQuery","fetch","fetchOptimistic","_this4","then","fetchOptions","_this5","promise","catch","_this6","clearStaleTimeout","timeout","dataUpdatedAt","staleTimeoutId","setTimeout","_this7","clearRefetchInterval","refetchIntervalId","setInterval","refetchIntervalInBackground","isFocused","clearTimeout","undefined","clearInterval","data","placeholderData","prevResult","prevResultState","currentResultState","prevResultOptions","currentResultOptions","queryChange","queryInitialState","state","currentQueryInitialState","prevQueryResult","previousQueryResult","errorUpdatedAt","status","isPreviousData","isPlaceholderData","optimisticResults","fetchOnMount","fetchOptionally","keepPreviousData","dataUpdateCount","isSuccess","select","structuralSharing","selectError","Date","now","isLoading","isIdle","failureCount","fetchFailureCount","isFetched","errorUpdateCount","isFetchedAfterMount","isLoadingError","isRefetchError","shouldNotifyListeners","_this$options","notifyOnChangeProps","notifyOnChangePropsExclusions","includedProps","some","changed","isIncluded","x","isExcluded","defaultNotifyOptions","cache","notify","onQueryUpdate","action","type","onSuccess","onError","_this8","batch","onSettled","listener","retryOnMount","shouldLoadOnMount","refetchOnMount","shouldRefetchOnMount","isStaleByTime","react","react_default","n","createValue","_isReset","clearReset","reset","isReset","QueryErrorResetBoundaryContext","a","createContext","QueryClientProvider","useBaseQuery","Observer","mountedRef","useRef","forceUpdate","useState","queryClient","errorResetBoundary","useContext","batchCalls","suspense","useErrorBoundary","obsRef","current","useEffect","_ref","arg1","arg2","arg3"],"mappings":"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"},"name":"static/chunks/7166d59e8c46d6d66f1177e95ab33921ec7d3605.0bea7acec8c6a9e3b0fc.js","input":"(window[\"webpackJsonp_N_E\"] = window[\"webpackJsonp_N_E\"] || []).push([[8],{\n\n/***/ \"Uvq/\":\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, \"a\", function() { return /* binding */ useQuery; });\n\n// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/extends.js\nvar esm_extends = __webpack_require__(\"wx14\");\n\n// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/inheritsLoose.js + 1 modules\nvar inheritsLoose = __webpack_require__(\"dI71\");\n\n// EXTERNAL MODULE: ./node_modules/react-query/es/core/utils.js\nvar utils = __webpack_require__(\"q/uT\");\n\n// EXTERNAL MODULE: ./node_modules/react-query/es/core/notifyManager.js\nvar notifyManager = __webpack_require__(\"GBAL\");\n\n// EXTERNAL MODULE: ./node_modules/react-query/es/core/focusManager.js\nvar focusManager = __webpack_require__(\"Yyzc\");\n\n// EXTERNAL MODULE: ./node_modules/react-query/es/core/subscribable.js\nvar subscribable = __webpack_require__(\"S6zn\");\n\n// EXTERNAL MODULE: ./node_modules/react-query/es/core/logger.js\nvar logger = __webpack_require__(\"G8/n\");\n\n// CONCATENATED MODULE: ./node_modules/react-query/es/core/queryObserver.js\n\n\n\n\n\n\n\nvar queryObserver_QueryObserver = /*#__PURE__*/function (_Subscribable) {\n  Object(inheritsLoose[\"a\" /* default */])(QueryObserver, _Subscribable);\n\n  function QueryObserver(client, options) {\n    var _this;\n\n    _this = _Subscribable.call(this) || this;\n    _this.client = client;\n    _this.options = options;\n    _this.trackedProps = [];\n    _this.previousSelectError = null;\n\n    _this.bindMethods();\n\n    _this.setOptions(options);\n\n    return _this;\n  }\n\n  var _proto = QueryObserver.prototype;\n\n  _proto.bindMethods = function bindMethods() {\n    this.remove = this.remove.bind(this);\n    this.refetch = this.refetch.bind(this);\n  };\n\n  _proto.onSubscribe = function onSubscribe() {\n    if (this.listeners.length === 1) {\n      this.currentQuery.addObserver(this);\n\n      if (shouldFetchOnMount(this.currentQuery, this.options)) {\n        this.executeFetch();\n      }\n\n      this.updateTimers();\n    }\n  };\n\n  _proto.onUnsubscribe = function onUnsubscribe() {\n    if (!this.listeners.length) {\n      this.destroy();\n    }\n  };\n\n  _proto.shouldFetchOnReconnect = function shouldFetchOnReconnect() {\n    return _shouldFetchOnReconnect(this.currentQuery, this.options);\n  };\n\n  _proto.shouldFetchOnWindowFocus = function shouldFetchOnWindowFocus() {\n    return _shouldFetchOnWindowFocus(this.currentQuery, this.options);\n  };\n\n  _proto.destroy = function destroy() {\n    this.listeners = [];\n    this.clearTimers();\n    this.currentQuery.removeObserver(this);\n  };\n\n  _proto.setOptions = function setOptions(options, notifyOptions) {\n    var prevOptions = this.options;\n    var prevQuery = this.currentQuery;\n    this.options = this.client.defaultQueryObserverOptions(options);\n\n    if (typeof this.options.enabled !== 'undefined' && typeof this.options.enabled !== 'boolean') {\n      throw new Error('Expected enabled to be a boolean');\n    } // Keep previous query key if the user does not supply one\n\n\n    if (!this.options.queryKey) {\n      this.options.queryKey = prevOptions.queryKey;\n    }\n\n    this.updateQuery();\n    var mounted = this.hasListeners(); // Fetch if there are subscribers\n\n    if (mounted && shouldFetchOptionally(this.currentQuery, prevQuery, this.options, prevOptions)) {\n      this.executeFetch();\n    } // Update result\n\n\n    this.updateResult(notifyOptions); // Update stale interval if needed\n\n    if (mounted && (this.currentQuery !== prevQuery || this.options.enabled !== prevOptions.enabled || this.options.staleTime !== prevOptions.staleTime)) {\n      this.updateStaleTimeout();\n    } // Update refetch interval if needed\n\n\n    if (mounted && (this.currentQuery !== prevQuery || this.options.enabled !== prevOptions.enabled || this.options.refetchInterval !== prevOptions.refetchInterval)) {\n      this.updateRefetchInterval();\n    }\n  };\n\n  _proto.getOptimisticResult = function getOptimisticResult(options) {\n    var defaultedOptions = this.client.defaultQueryObserverOptions(options);\n    var query = this.client.getQueryCache().build(this.client, defaultedOptions);\n    return this.createResult(query, defaultedOptions);\n  };\n\n  _proto.getCurrentResult = function getCurrentResult() {\n    return this.currentResult;\n  };\n\n  _proto.trackResult = function trackResult(result) {\n    var _this2 = this;\n\n    var trackedResult = {};\n    Object.keys(result).forEach(function (key) {\n      Object.defineProperty(trackedResult, key, {\n        configurable: false,\n        enumerable: true,\n        get: function get() {\n          var typedKey = key;\n\n          if (!_this2.trackedProps.includes(typedKey)) {\n            _this2.trackedProps.push(typedKey);\n          }\n\n          return result[typedKey];\n        }\n      });\n    });\n    return trackedResult;\n  };\n\n  _proto.getNextResult = function getNextResult(options) {\n    var _this3 = this;\n\n    return new Promise(function (resolve, reject) {\n      var unsubscribe = _this3.subscribe(function (result) {\n        if (!result.isFetching) {\n          unsubscribe();\n\n          if (result.isError && (options == null ? void 0 : options.throwOnError)) {\n            reject(result.error);\n          } else {\n            resolve(result);\n          }\n        }\n      });\n    });\n  };\n\n  _proto.getCurrentQuery = function getCurrentQuery() {\n    return this.currentQuery;\n  };\n\n  _proto.remove = function remove() {\n    this.client.getQueryCache().remove(this.currentQuery);\n  };\n\n  _proto.refetch = function refetch(options) {\n    return this.fetch(options);\n  };\n\n  _proto.fetchOptimistic = function fetchOptimistic(options) {\n    var _this4 = this;\n\n    var defaultedOptions = this.client.defaultQueryObserverOptions(options);\n    var query = this.client.getQueryCache().build(this.client, defaultedOptions);\n    return query.fetch().then(function () {\n      return _this4.createResult(query, defaultedOptions);\n    });\n  };\n\n  _proto.fetch = function fetch(fetchOptions) {\n    var _this5 = this;\n\n    return this.executeFetch(fetchOptions).then(function () {\n      _this5.updateResult();\n\n      return _this5.currentResult;\n    });\n  };\n\n  _proto.executeFetch = function executeFetch(fetchOptions) {\n    // Make sure we reference the latest query as the current one might have been removed\n    this.updateQuery(); // Fetch\n\n    var promise = this.currentQuery.fetch(this.options, fetchOptions);\n\n    if (!(fetchOptions == null ? void 0 : fetchOptions.throwOnError)) {\n      promise = promise.catch(utils[\"i\" /* noop */]);\n    }\n\n    return promise;\n  };\n\n  _proto.updateStaleTimeout = function updateStaleTimeout() {\n    var _this6 = this;\n\n    this.clearStaleTimeout();\n\n    if (utils[\"e\" /* isServer */] || this.currentResult.isStale || !Object(utils[\"f\" /* isValidTimeout */])(this.options.staleTime)) {\n      return;\n    }\n\n    var time = Object(utils[\"r\" /* timeUntilStale */])(this.currentResult.dataUpdatedAt, this.options.staleTime); // The timeout is sometimes triggered 1 ms before the stale time expiration.\n    // To mitigate this issue we always add 1 ms to the timeout.\n\n    var timeout = time + 1;\n    this.staleTimeoutId = setTimeout(function () {\n      if (!_this6.currentResult.isStale) {\n        _this6.updateResult();\n      }\n    }, timeout);\n  };\n\n  _proto.updateRefetchInterval = function updateRefetchInterval() {\n    var _this7 = this;\n\n    this.clearRefetchInterval();\n\n    if (utils[\"e\" /* isServer */] || this.options.enabled === false || !Object(utils[\"f\" /* isValidTimeout */])(this.options.refetchInterval)) {\n      return;\n    }\n\n    this.refetchIntervalId = setInterval(function () {\n      if (_this7.options.refetchIntervalInBackground || focusManager[\"a\" /* focusManager */].isFocused()) {\n        _this7.executeFetch();\n      }\n    }, this.options.refetchInterval);\n  };\n\n  _proto.updateTimers = function updateTimers() {\n    this.updateStaleTimeout();\n    this.updateRefetchInterval();\n  };\n\n  _proto.clearTimers = function clearTimers() {\n    this.clearStaleTimeout();\n    this.clearRefetchInterval();\n  };\n\n  _proto.clearStaleTimeout = function clearStaleTimeout() {\n    clearTimeout(this.staleTimeoutId);\n    this.staleTimeoutId = undefined;\n  };\n\n  _proto.clearRefetchInterval = function clearRefetchInterval() {\n    clearInterval(this.refetchIntervalId);\n    this.refetchIntervalId = undefined;\n  };\n\n  _proto.createResult = function createResult(query, options) {\n    var prevQuery = this.currentQuery;\n    var prevOptions = this.options;\n    var prevResult = this.currentResult;\n    var prevResultState = this.currentResultState;\n    var prevResultOptions = this.currentResultOptions;\n    var queryChange = query !== prevQuery;\n    var queryInitialState = queryChange ? query.state : this.currentQueryInitialState;\n    var prevQueryResult = queryChange ? this.currentResult : this.previousQueryResult;\n    var state = query.state;\n    var dataUpdatedAt = state.dataUpdatedAt,\n        error = state.error,\n        errorUpdatedAt = state.errorUpdatedAt,\n        isFetching = state.isFetching,\n        status = state.status;\n    var isPreviousData = false;\n    var isPlaceholderData = false;\n    var data; // Optimistically set result in fetching state if needed\n\n    if (options.optimisticResults) {\n      var mounted = this.hasListeners();\n      var fetchOnMount = !mounted && shouldFetchOnMount(query, options);\n      var fetchOptionally = mounted && shouldFetchOptionally(query, prevQuery, options, prevOptions);\n\n      if (fetchOnMount || fetchOptionally) {\n        isFetching = true;\n\n        if (!dataUpdatedAt) {\n          status = 'loading';\n        }\n      }\n    } // Keep previous data if needed\n\n\n    if (options.keepPreviousData && !state.dataUpdateCount && (prevQueryResult == null ? void 0 : prevQueryResult.isSuccess) && status !== 'error') {\n      data = prevQueryResult.data;\n      dataUpdatedAt = prevQueryResult.dataUpdatedAt;\n      status = prevQueryResult.status;\n      isPreviousData = true;\n    } // Select data if needed\n    else if (options.select && typeof state.data !== 'undefined') {\n        // Memoize select result\n        if (prevResult && state.data === (prevResultState == null ? void 0 : prevResultState.data) && options.select === (prevResultOptions == null ? void 0 : prevResultOptions.select) && !this.previousSelectError) {\n          data = prevResult.data;\n        } else {\n          try {\n            data = options.select(state.data);\n\n            if (options.structuralSharing !== false) {\n              data = Object(utils[\"n\" /* replaceEqualDeep */])(prevResult == null ? void 0 : prevResult.data, data);\n            }\n\n            this.previousSelectError = null;\n          } catch (selectError) {\n            Object(logger[\"a\" /* getLogger */])().error(selectError);\n            error = selectError;\n            this.previousSelectError = selectError;\n            errorUpdatedAt = Date.now();\n            status = 'error';\n          }\n        }\n      } // Use query data\n      else {\n          data = state.data;\n        } // Show placeholder data if needed\n\n\n    if (typeof options.placeholderData !== 'undefined' && typeof data === 'undefined' && status === 'loading') {\n      var placeholderData; // Memoize placeholder data\n\n      if ((prevResult == null ? void 0 : prevResult.isPlaceholderData) && options.placeholderData === (prevResultOptions == null ? void 0 : prevResultOptions.placeholderData)) {\n        placeholderData = prevResult.data;\n      } else {\n        placeholderData = typeof options.placeholderData === 'function' ? options.placeholderData() : options.placeholderData;\n      }\n\n      if (typeof placeholderData !== 'undefined') {\n        status = 'success';\n        data = placeholderData;\n        isPlaceholderData = true;\n      }\n    }\n\n    var result = {\n      status: status,\n      isLoading: status === 'loading',\n      isSuccess: status === 'success',\n      isError: status === 'error',\n      isIdle: status === 'idle',\n      data: data,\n      dataUpdatedAt: dataUpdatedAt,\n      error: error,\n      errorUpdatedAt: errorUpdatedAt,\n      failureCount: state.fetchFailureCount,\n      isFetched: state.dataUpdateCount > 0 || state.errorUpdateCount > 0,\n      isFetchedAfterMount: state.dataUpdateCount > queryInitialState.dataUpdateCount || state.errorUpdateCount > queryInitialState.errorUpdateCount,\n      isFetching: isFetching,\n      isLoadingError: status === 'error' && state.dataUpdatedAt === 0,\n      isPlaceholderData: isPlaceholderData,\n      isPreviousData: isPreviousData,\n      isRefetchError: status === 'error' && state.dataUpdatedAt !== 0,\n      isStale: isStale(query, options),\n      refetch: this.refetch,\n      remove: this.remove\n    };\n    return result;\n  };\n\n  _proto.shouldNotifyListeners = function shouldNotifyListeners(result, prevResult) {\n    if (!prevResult) {\n      return true;\n    }\n\n    if (result === prevResult) {\n      return false;\n    }\n\n    var _this$options = this.options,\n        notifyOnChangeProps = _this$options.notifyOnChangeProps,\n        notifyOnChangePropsExclusions = _this$options.notifyOnChangePropsExclusions;\n\n    if (!notifyOnChangeProps && !notifyOnChangePropsExclusions) {\n      return true;\n    }\n\n    if (notifyOnChangeProps === 'tracked' && !this.trackedProps.length) {\n      return true;\n    }\n\n    var includedProps = notifyOnChangeProps === 'tracked' ? this.trackedProps : notifyOnChangeProps;\n    return Object.keys(result).some(function (key) {\n      var typedKey = key;\n      var changed = result[typedKey] !== prevResult[typedKey];\n      var isIncluded = includedProps == null ? void 0 : includedProps.some(function (x) {\n        return x === key;\n      });\n      var isExcluded = notifyOnChangePropsExclusions == null ? void 0 : notifyOnChangePropsExclusions.some(function (x) {\n        return x === key;\n      });\n      return changed && !isExcluded && (!includedProps || isIncluded);\n    });\n  };\n\n  _proto.updateResult = function updateResult(notifyOptions) {\n    var prevResult = this.currentResult;\n    this.currentResult = this.createResult(this.currentQuery, this.options);\n    this.currentResultState = this.currentQuery.state;\n    this.currentResultOptions = this.options; // Only notify if something has changed\n\n    if (Object(utils[\"p\" /* shallowEqualObjects */])(this.currentResult, prevResult)) {\n      return;\n    } // Determine which callbacks to trigger\n\n\n    var defaultNotifyOptions = {\n      cache: true\n    };\n\n    if ((notifyOptions == null ? void 0 : notifyOptions.listeners) !== false && this.shouldNotifyListeners(this.currentResult, prevResult)) {\n      defaultNotifyOptions.listeners = true;\n    }\n\n    this.notify(Object(esm_extends[\"a\" /* default */])({}, defaultNotifyOptions, notifyOptions));\n  };\n\n  _proto.updateQuery = function updateQuery() {\n    var query = this.client.getQueryCache().build(this.client, this.options);\n\n    if (query === this.currentQuery) {\n      return;\n    }\n\n    var prevQuery = this.currentQuery;\n    this.currentQuery = query;\n    this.currentQueryInitialState = query.state;\n    this.previousQueryResult = this.currentResult;\n\n    if (this.hasListeners()) {\n      prevQuery == null ? void 0 : prevQuery.removeObserver(this);\n      query.addObserver(this);\n    }\n  };\n\n  _proto.onQueryUpdate = function onQueryUpdate(action) {\n    var notifyOptions = {};\n\n    if (action.type === 'success') {\n      notifyOptions.onSuccess = true;\n    } else if (action.type === 'error') {\n      notifyOptions.onError = true;\n    }\n\n    this.updateResult(notifyOptions);\n\n    if (this.hasListeners()) {\n      this.updateTimers();\n    }\n  };\n\n  _proto.notify = function notify(notifyOptions) {\n    var _this8 = this;\n\n    notifyManager[\"a\" /* notifyManager */].batch(function () {\n      // First trigger the configuration callbacks\n      if (notifyOptions.onSuccess) {\n        _this8.options.onSuccess == null ? void 0 : _this8.options.onSuccess(_this8.currentResult.data);\n        _this8.options.onSettled == null ? void 0 : _this8.options.onSettled(_this8.currentResult.data, null);\n      } else if (notifyOptions.onError) {\n        _this8.options.onError == null ? void 0 : _this8.options.onError(_this8.currentResult.error);\n        _this8.options.onSettled == null ? void 0 : _this8.options.onSettled(undefined, _this8.currentResult.error);\n      } // Then trigger the listeners\n\n\n      if (notifyOptions.listeners) {\n        _this8.listeners.forEach(function (listener) {\n          listener(_this8.currentResult);\n        });\n      } // Then the cache listeners\n\n\n      if (notifyOptions.cache) {\n        _this8.client.getQueryCache().notify({\n          query: _this8.currentQuery,\n          type: 'observerResultsUpdated'\n        });\n      }\n    });\n  };\n\n  return QueryObserver;\n}(subscribable[\"a\" /* Subscribable */]);\n\nfunction shouldLoadOnMount(query, options) {\n  return options.enabled !== false && !query.state.dataUpdatedAt && !(query.state.status === 'error' && options.retryOnMount === false);\n}\n\nfunction shouldRefetchOnMount(query, options) {\n  return options.enabled !== false && query.state.dataUpdatedAt > 0 && (options.refetchOnMount === 'always' || options.refetchOnMount !== false && isStale(query, options));\n}\n\nfunction shouldFetchOnMount(query, options) {\n  return shouldLoadOnMount(query, options) || shouldRefetchOnMount(query, options);\n}\n\nfunction _shouldFetchOnReconnect(query, options) {\n  return options.enabled !== false && (options.refetchOnReconnect === 'always' || options.refetchOnReconnect !== false && isStale(query, options));\n}\n\nfunction _shouldFetchOnWindowFocus(query, options) {\n  return options.enabled !== false && (options.refetchOnWindowFocus === 'always' || options.refetchOnWindowFocus !== false && isStale(query, options));\n}\n\nfunction shouldFetchOptionally(query, prevQuery, options, prevOptions) {\n  return options.enabled !== false && (query !== prevQuery || prevOptions.enabled === false) && isStale(query, options);\n}\n\nfunction isStale(query, options) {\n  return query.isStaleByTime(options.staleTime);\n}\n// EXTERNAL MODULE: ./node_modules/react/index.js\nvar react = __webpack_require__(\"q1tI\");\nvar react_default = /*#__PURE__*/__webpack_require__.n(react);\n\n// CONCATENATED MODULE: ./node_modules/react-query/es/react/QueryErrorResetBoundary.js\n // CONTEXT\n\nfunction createValue() {\n  var _isReset = false;\n  return {\n    clearReset: function clearReset() {\n      _isReset = false;\n    },\n    reset: function reset() {\n      _isReset = true;\n    },\n    isReset: function isReset() {\n      return _isReset;\n    }\n  };\n}\n\nvar QueryErrorResetBoundaryContext = /*#__PURE__*/react_default.a.createContext(createValue()); // HOOK\n\nvar QueryErrorResetBoundary_useQueryErrorResetBoundary = function useQueryErrorResetBoundary() {\n  return react_default.a.useContext(QueryErrorResetBoundaryContext);\n}; // COMPONENT\n\nvar QueryErrorResetBoundary_QueryErrorResetBoundary = function QueryErrorResetBoundary(_ref) {\n  var children = _ref.children;\n  var value = react_default.a.useMemo(function () {\n    return createValue();\n  }, []);\n  return /*#__PURE__*/react_default.a.createElement(QueryErrorResetBoundaryContext.Provider, {\n    value: value\n  }, typeof children === 'function' ? children(value) : children);\n};\n// EXTERNAL MODULE: ./node_modules/react-query/es/react/QueryClientProvider.js\nvar QueryClientProvider = __webpack_require__(\"+QN0\");\n\n// CONCATENATED MODULE: ./node_modules/react-query/es/react/useBaseQuery.js\n\n\n\n\nfunction useBaseQuery(options, Observer) {\n  var mountedRef = react_default.a.useRef(false);\n\n  var _React$useState = react_default.a.useState(0),\n      forceUpdate = _React$useState[1];\n\n  var queryClient = Object(QueryClientProvider[\"b\" /* useQueryClient */])();\n  var errorResetBoundary = QueryErrorResetBoundary_useQueryErrorResetBoundary();\n  var defaultedOptions = queryClient.defaultQueryObserverOptions(options); // Make sure results are optimistically set in fetching state before subscribing or updating options\n\n  defaultedOptions.optimisticResults = true; // Include callbacks in batch renders\n\n  if (defaultedOptions.onError) {\n    defaultedOptions.onError = notifyManager[\"a\" /* notifyManager */].batchCalls(defaultedOptions.onError);\n  }\n\n  if (defaultedOptions.onSuccess) {\n    defaultedOptions.onSuccess = notifyManager[\"a\" /* notifyManager */].batchCalls(defaultedOptions.onSuccess);\n  }\n\n  if (defaultedOptions.onSettled) {\n    defaultedOptions.onSettled = notifyManager[\"a\" /* notifyManager */].batchCalls(defaultedOptions.onSettled);\n  }\n\n  if (defaultedOptions.suspense) {\n    // Always set stale time when using suspense to prevent\n    // fetching again when directly mounting after suspending\n    if (typeof defaultedOptions.staleTime !== 'number') {\n      defaultedOptions.staleTime = 1000;\n    }\n  }\n\n  if (defaultedOptions.suspense || defaultedOptions.useErrorBoundary) {\n    // Prevent retrying failed query if the error boundary has not been reset yet\n    if (!errorResetBoundary.isReset()) {\n      defaultedOptions.retryOnMount = false;\n    }\n  }\n\n  var obsRef = react_default.a.useRef();\n\n  if (!obsRef.current) {\n    obsRef.current = new Observer(queryClient, defaultedOptions);\n  }\n\n  var result = obsRef.current.getOptimisticResult(defaultedOptions);\n  react_default.a.useEffect(function () {\n    mountedRef.current = true;\n    errorResetBoundary.clearReset();\n    var unsubscribe = obsRef.current.subscribe(notifyManager[\"a\" /* notifyManager */].batchCalls(function () {\n      if (mountedRef.current) {\n        forceUpdate(function (x) {\n          return x + 1;\n        });\n      }\n    })); // Update result to make sure we did not miss any query updates\n    // between creating the observer and subscribing to it.\n\n    obsRef.current.updateResult();\n    return function () {\n      mountedRef.current = false;\n      unsubscribe();\n    };\n  }, [errorResetBoundary]);\n  react_default.a.useEffect(function () {\n    // Do not notify on updates because of changes in the options because\n    // these changes should already be reflected in the optimistic result.\n    obsRef.current.setOptions(defaultedOptions, {\n      listeners: false\n    });\n  }, [defaultedOptions]); // Handle suspense\n\n  if (defaultedOptions.suspense && result.isLoading) {\n    throw obsRef.current.fetchOptimistic(defaultedOptions).then(function (_ref) {\n      var data = _ref.data;\n      defaultedOptions.onSuccess == null ? void 0 : defaultedOptions.onSuccess(data);\n      defaultedOptions.onSettled == null ? void 0 : defaultedOptions.onSettled(data, null);\n    }).catch(function (error) {\n      errorResetBoundary.clearReset();\n      defaultedOptions.onError == null ? void 0 : defaultedOptions.onError(error);\n      defaultedOptions.onSettled == null ? void 0 : defaultedOptions.onSettled(undefined, error);\n    });\n  } // Handle error boundary\n\n\n  if ((defaultedOptions.suspense || defaultedOptions.useErrorBoundary) && result.isError) {\n    throw result.error;\n  } // Handle result property usage tracking\n\n\n  if (defaultedOptions.notifyOnChangeProps === 'tracked') {\n    result = obsRef.current.trackResult(result);\n  }\n\n  return result;\n}\n// CONCATENATED MODULE: ./node_modules/react-query/es/react/useQuery.js\n\n\n // HOOK\n\nfunction useQuery(arg1, arg2, arg3) {\n  var parsedOptions = Object(utils[\"l\" /* parseQueryArgs */])(arg1, arg2, arg3);\n  return useBaseQuery(parsedOptions, queryObserver_QueryObserver);\n}\n\n/***/ })\n\n}]);","inputSourceMap":{"version":3,"sources":["/home/smoke/Área de Trabalho/dashgo/node_modules/react-query/es/core/queryObserver.js","/home/smoke/Área de Trabalho/dashgo/node_modules/react-query/es/react/QueryErrorResetBoundary.js","/home/smoke/Área de Trabalho/dashgo/node_modules/react-query/es/react/useBaseQuery.js","/home/smoke/Área de Trabalho/dashgo/node_modules/react-query/es/react/useQuery.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAA0D;AACY;AAC0C;AAChE;AACF;AACA;AACT;AAC9B,IAAI,2BAAa;AACxB,EAAE,wCAAc;;AAEhB;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,KAAK;;;AAGL;AACA;AACA;;AAEA;AACA,sCAAsC;;AAEtC;AACA;AACA,KAAK;;;AAGL,qCAAqC;;AAErC;AACA;AACA,KAAK;;;AAGL;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,OAAO;AACP,KAAK;AACL;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA,OAAO;AACP,KAAK;AACL;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA,KAAK;AACL;;AAEA;AACA;AACA,uBAAuB;;AAEvB;;AAEA;AACA,8BAA8B,qBAAI;AAClC;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA,QAAQ,yBAAQ,mCAAmC,uCAAc;AACjE;AACA;;AAEA,eAAe,uCAAc,2DAA2D;AACxF;;AAEA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;;AAEA;;AAEA,QAAQ,yBAAQ,uCAAuC,uCAAc;AACrE;AACA;;AAEA;AACA,wDAAwD,oCAAY;AACpE;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;;AAEb;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,KAAK;;;AAGL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA,qBAAqB,yCAAgB;AACrC;;AAEA;AACA,WAAW;AACX,YAAY,mCAAS;AACrB;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA,SAAS;;;AAGT;AACA,0BAA0B;;AAE1B;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA,OAAO;AACP;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA,6CAA6C;;AAE7C,QAAQ,4CAAmB;AAC3B;AACA,KAAK;;;AAGL;AACA;AACA;;AAEA;AACA;AACA;;AAEA,gBAAgB,sCAAQ,GAAG;AAC3B;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,KAAK;AACL;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA,IAAI,sCAAa;AACjB;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA,OAAO;;;AAGP;AACA;AACA;AACA,SAAS;AACT,OAAO;;;AAGP;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,KAAK;AACL;;AAEA;AACA,CAAC,CAAC,oCAAY;;AAEd;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,C;;;;;;AC5f0B;;AAE1B;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;;AAEA,kDAAkD,eAAK,8BAA8B;;AAE9E,IAAI,kDAA0B;AACrC,SAAS,eAAK;AACd,EAAE;;AAEK,IAAI,+CAAuB;AAClC;AACA,cAAc,eAAK;AACnB;AACA,GAAG;AACH,sBAAsB,eAAK;AAC3B;AACA,GAAG;AACH,E;;;;;AC/B0B;AAC4B;AACiB;AAChB;AAChD;AACP,mBAAmB,eAAK;;AAExB,wBAAwB,eAAK;AAC7B;;AAEA,oBAAoB,qDAAc;AAClC,2BAA2B,kDAA0B;AACrD,0EAA0E;;AAE1E,4CAA4C;;AAE5C;AACA,+BAA+B,sCAAa;AAC5C;;AAEA;AACA,iCAAiC,sCAAa;AAC9C;;AAEA;AACA,iCAAiC,sCAAa;AAC9C;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,eAAe,eAAK;;AAEpB;AACA;AACA;;AAEA;AACA,EAAE,eAAK;AACP;AACA;AACA,+CAA+C,sCAAa;AAC5D;AACA;AACA;AACA,SAAS;AACT;AACA,KAAK,GAAG;AACR;;AAEA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH,EAAE,eAAK;AACP;AACA;AACA;AACA;AACA,KAAK;AACL,GAAG,sBAAsB;;AAEzB;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL,GAAG;;;AAGH;AACA;AACA,GAAG;;;AAGH;AACA;AACA;;AAEA;AACA,C;;ACnGwC;AACO;AACD;;AAEvC;AACP,sBAAsB,uCAAc;AACpC,SAAS,YAAY,gBAAgB,2BAAa;AAClD,C","file":"x","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _inheritsLoose from \"@babel/runtime/helpers/esm/inheritsLoose\";\nimport { isServer, isValidTimeout, noop, replaceEqualDeep, shallowEqualObjects, timeUntilStale } from './utils';\nimport { notifyManager } from './notifyManager';\nimport { focusManager } from './focusManager';\nimport { Subscribable } from './subscribable';\nimport { getLogger } from './logger';\nexport var QueryObserver = /*#__PURE__*/function (_Subscribable) {\n  _inheritsLoose(QueryObserver, _Subscribable);\n\n  function QueryObserver(client, options) {\n    var _this;\n\n    _this = _Subscribable.call(this) || this;\n    _this.client = client;\n    _this.options = options;\n    _this.trackedProps = [];\n    _this.previousSelectError = null;\n\n    _this.bindMethods();\n\n    _this.setOptions(options);\n\n    return _this;\n  }\n\n  var _proto = QueryObserver.prototype;\n\n  _proto.bindMethods = function bindMethods() {\n    this.remove = this.remove.bind(this);\n    this.refetch = this.refetch.bind(this);\n  };\n\n  _proto.onSubscribe = function onSubscribe() {\n    if (this.listeners.length === 1) {\n      this.currentQuery.addObserver(this);\n\n      if (shouldFetchOnMount(this.currentQuery, this.options)) {\n        this.executeFetch();\n      }\n\n      this.updateTimers();\n    }\n  };\n\n  _proto.onUnsubscribe = function onUnsubscribe() {\n    if (!this.listeners.length) {\n      this.destroy();\n    }\n  };\n\n  _proto.shouldFetchOnReconnect = function shouldFetchOnReconnect() {\n    return _shouldFetchOnReconnect(this.currentQuery, this.options);\n  };\n\n  _proto.shouldFetchOnWindowFocus = function shouldFetchOnWindowFocus() {\n    return _shouldFetchOnWindowFocus(this.currentQuery, this.options);\n  };\n\n  _proto.destroy = function destroy() {\n    this.listeners = [];\n    this.clearTimers();\n    this.currentQuery.removeObserver(this);\n  };\n\n  _proto.setOptions = function setOptions(options, notifyOptions) {\n    var prevOptions = this.options;\n    var prevQuery = this.currentQuery;\n    this.options = this.client.defaultQueryObserverOptions(options);\n\n    if (typeof this.options.enabled !== 'undefined' && typeof this.options.enabled !== 'boolean') {\n      throw new Error('Expected enabled to be a boolean');\n    } // Keep previous query key if the user does not supply one\n\n\n    if (!this.options.queryKey) {\n      this.options.queryKey = prevOptions.queryKey;\n    }\n\n    this.updateQuery();\n    var mounted = this.hasListeners(); // Fetch if there are subscribers\n\n    if (mounted && shouldFetchOptionally(this.currentQuery, prevQuery, this.options, prevOptions)) {\n      this.executeFetch();\n    } // Update result\n\n\n    this.updateResult(notifyOptions); // Update stale interval if needed\n\n    if (mounted && (this.currentQuery !== prevQuery || this.options.enabled !== prevOptions.enabled || this.options.staleTime !== prevOptions.staleTime)) {\n      this.updateStaleTimeout();\n    } // Update refetch interval if needed\n\n\n    if (mounted && (this.currentQuery !== prevQuery || this.options.enabled !== prevOptions.enabled || this.options.refetchInterval !== prevOptions.refetchInterval)) {\n      this.updateRefetchInterval();\n    }\n  };\n\n  _proto.getOptimisticResult = function getOptimisticResult(options) {\n    var defaultedOptions = this.client.defaultQueryObserverOptions(options);\n    var query = this.client.getQueryCache().build(this.client, defaultedOptions);\n    return this.createResult(query, defaultedOptions);\n  };\n\n  _proto.getCurrentResult = function getCurrentResult() {\n    return this.currentResult;\n  };\n\n  _proto.trackResult = function trackResult(result) {\n    var _this2 = this;\n\n    var trackedResult = {};\n    Object.keys(result).forEach(function (key) {\n      Object.defineProperty(trackedResult, key, {\n        configurable: false,\n        enumerable: true,\n        get: function get() {\n          var typedKey = key;\n\n          if (!_this2.trackedProps.includes(typedKey)) {\n            _this2.trackedProps.push(typedKey);\n          }\n\n          return result[typedKey];\n        }\n      });\n    });\n    return trackedResult;\n  };\n\n  _proto.getNextResult = function getNextResult(options) {\n    var _this3 = this;\n\n    return new Promise(function (resolve, reject) {\n      var unsubscribe = _this3.subscribe(function (result) {\n        if (!result.isFetching) {\n          unsubscribe();\n\n          if (result.isError && (options == null ? void 0 : options.throwOnError)) {\n            reject(result.error);\n          } else {\n            resolve(result);\n          }\n        }\n      });\n    });\n  };\n\n  _proto.getCurrentQuery = function getCurrentQuery() {\n    return this.currentQuery;\n  };\n\n  _proto.remove = function remove() {\n    this.client.getQueryCache().remove(this.currentQuery);\n  };\n\n  _proto.refetch = function refetch(options) {\n    return this.fetch(options);\n  };\n\n  _proto.fetchOptimistic = function fetchOptimistic(options) {\n    var _this4 = this;\n\n    var defaultedOptions = this.client.defaultQueryObserverOptions(options);\n    var query = this.client.getQueryCache().build(this.client, defaultedOptions);\n    return query.fetch().then(function () {\n      return _this4.createResult(query, defaultedOptions);\n    });\n  };\n\n  _proto.fetch = function fetch(fetchOptions) {\n    var _this5 = this;\n\n    return this.executeFetch(fetchOptions).then(function () {\n      _this5.updateResult();\n\n      return _this5.currentResult;\n    });\n  };\n\n  _proto.executeFetch = function executeFetch(fetchOptions) {\n    // Make sure we reference the latest query as the current one might have been removed\n    this.updateQuery(); // Fetch\n\n    var promise = this.currentQuery.fetch(this.options, fetchOptions);\n\n    if (!(fetchOptions == null ? void 0 : fetchOptions.throwOnError)) {\n      promise = promise.catch(noop);\n    }\n\n    return promise;\n  };\n\n  _proto.updateStaleTimeout = function updateStaleTimeout() {\n    var _this6 = this;\n\n    this.clearStaleTimeout();\n\n    if (isServer || this.currentResult.isStale || !isValidTimeout(this.options.staleTime)) {\n      return;\n    }\n\n    var time = timeUntilStale(this.currentResult.dataUpdatedAt, this.options.staleTime); // The timeout is sometimes triggered 1 ms before the stale time expiration.\n    // To mitigate this issue we always add 1 ms to the timeout.\n\n    var timeout = time + 1;\n    this.staleTimeoutId = setTimeout(function () {\n      if (!_this6.currentResult.isStale) {\n        _this6.updateResult();\n      }\n    }, timeout);\n  };\n\n  _proto.updateRefetchInterval = function updateRefetchInterval() {\n    var _this7 = this;\n\n    this.clearRefetchInterval();\n\n    if (isServer || this.options.enabled === false || !isValidTimeout(this.options.refetchInterval)) {\n      return;\n    }\n\n    this.refetchIntervalId = setInterval(function () {\n      if (_this7.options.refetchIntervalInBackground || focusManager.isFocused()) {\n        _this7.executeFetch();\n      }\n    }, this.options.refetchInterval);\n  };\n\n  _proto.updateTimers = function updateTimers() {\n    this.updateStaleTimeout();\n    this.updateRefetchInterval();\n  };\n\n  _proto.clearTimers = function clearTimers() {\n    this.clearStaleTimeout();\n    this.clearRefetchInterval();\n  };\n\n  _proto.clearStaleTimeout = function clearStaleTimeout() {\n    clearTimeout(this.staleTimeoutId);\n    this.staleTimeoutId = undefined;\n  };\n\n  _proto.clearRefetchInterval = function clearRefetchInterval() {\n    clearInterval(this.refetchIntervalId);\n    this.refetchIntervalId = undefined;\n  };\n\n  _proto.createResult = function createResult(query, options) {\n    var prevQuery = this.currentQuery;\n    var prevOptions = this.options;\n    var prevResult = this.currentResult;\n    var prevResultState = this.currentResultState;\n    var prevResultOptions = this.currentResultOptions;\n    var queryChange = query !== prevQuery;\n    var queryInitialState = queryChange ? query.state : this.currentQueryInitialState;\n    var prevQueryResult = queryChange ? this.currentResult : this.previousQueryResult;\n    var state = query.state;\n    var dataUpdatedAt = state.dataUpdatedAt,\n        error = state.error,\n        errorUpdatedAt = state.errorUpdatedAt,\n        isFetching = state.isFetching,\n        status = state.status;\n    var isPreviousData = false;\n    var isPlaceholderData = false;\n    var data; // Optimistically set result in fetching state if needed\n\n    if (options.optimisticResults) {\n      var mounted = this.hasListeners();\n      var fetchOnMount = !mounted && shouldFetchOnMount(query, options);\n      var fetchOptionally = mounted && shouldFetchOptionally(query, prevQuery, options, prevOptions);\n\n      if (fetchOnMount || fetchOptionally) {\n        isFetching = true;\n\n        if (!dataUpdatedAt) {\n          status = 'loading';\n        }\n      }\n    } // Keep previous data if needed\n\n\n    if (options.keepPreviousData && !state.dataUpdateCount && (prevQueryResult == null ? void 0 : prevQueryResult.isSuccess) && status !== 'error') {\n      data = prevQueryResult.data;\n      dataUpdatedAt = prevQueryResult.dataUpdatedAt;\n      status = prevQueryResult.status;\n      isPreviousData = true;\n    } // Select data if needed\n    else if (options.select && typeof state.data !== 'undefined') {\n        // Memoize select result\n        if (prevResult && state.data === (prevResultState == null ? void 0 : prevResultState.data) && options.select === (prevResultOptions == null ? void 0 : prevResultOptions.select) && !this.previousSelectError) {\n          data = prevResult.data;\n        } else {\n          try {\n            data = options.select(state.data);\n\n            if (options.structuralSharing !== false) {\n              data = replaceEqualDeep(prevResult == null ? void 0 : prevResult.data, data);\n            }\n\n            this.previousSelectError = null;\n          } catch (selectError) {\n            getLogger().error(selectError);\n            error = selectError;\n            this.previousSelectError = selectError;\n            errorUpdatedAt = Date.now();\n            status = 'error';\n          }\n        }\n      } // Use query data\n      else {\n          data = state.data;\n        } // Show placeholder data if needed\n\n\n    if (typeof options.placeholderData !== 'undefined' && typeof data === 'undefined' && status === 'loading') {\n      var placeholderData; // Memoize placeholder data\n\n      if ((prevResult == null ? void 0 : prevResult.isPlaceholderData) && options.placeholderData === (prevResultOptions == null ? void 0 : prevResultOptions.placeholderData)) {\n        placeholderData = prevResult.data;\n      } else {\n        placeholderData = typeof options.placeholderData === 'function' ? options.placeholderData() : options.placeholderData;\n      }\n\n      if (typeof placeholderData !== 'undefined') {\n        status = 'success';\n        data = placeholderData;\n        isPlaceholderData = true;\n      }\n    }\n\n    var result = {\n      status: status,\n      isLoading: status === 'loading',\n      isSuccess: status === 'success',\n      isError: status === 'error',\n      isIdle: status === 'idle',\n      data: data,\n      dataUpdatedAt: dataUpdatedAt,\n      error: error,\n      errorUpdatedAt: errorUpdatedAt,\n      failureCount: state.fetchFailureCount,\n      isFetched: state.dataUpdateCount > 0 || state.errorUpdateCount > 0,\n      isFetchedAfterMount: state.dataUpdateCount > queryInitialState.dataUpdateCount || state.errorUpdateCount > queryInitialState.errorUpdateCount,\n      isFetching: isFetching,\n      isLoadingError: status === 'error' && state.dataUpdatedAt === 0,\n      isPlaceholderData: isPlaceholderData,\n      isPreviousData: isPreviousData,\n      isRefetchError: status === 'error' && state.dataUpdatedAt !== 0,\n      isStale: isStale(query, options),\n      refetch: this.refetch,\n      remove: this.remove\n    };\n    return result;\n  };\n\n  _proto.shouldNotifyListeners = function shouldNotifyListeners(result, prevResult) {\n    if (!prevResult) {\n      return true;\n    }\n\n    if (result === prevResult) {\n      return false;\n    }\n\n    var _this$options = this.options,\n        notifyOnChangeProps = _this$options.notifyOnChangeProps,\n        notifyOnChangePropsExclusions = _this$options.notifyOnChangePropsExclusions;\n\n    if (!notifyOnChangeProps && !notifyOnChangePropsExclusions) {\n      return true;\n    }\n\n    if (notifyOnChangeProps === 'tracked' && !this.trackedProps.length) {\n      return true;\n    }\n\n    var includedProps = notifyOnChangeProps === 'tracked' ? this.trackedProps : notifyOnChangeProps;\n    return Object.keys(result).some(function (key) {\n      var typedKey = key;\n      var changed = result[typedKey] !== prevResult[typedKey];\n      var isIncluded = includedProps == null ? void 0 : includedProps.some(function (x) {\n        return x === key;\n      });\n      var isExcluded = notifyOnChangePropsExclusions == null ? void 0 : notifyOnChangePropsExclusions.some(function (x) {\n        return x === key;\n      });\n      return changed && !isExcluded && (!includedProps || isIncluded);\n    });\n  };\n\n  _proto.updateResult = function updateResult(notifyOptions) {\n    var prevResult = this.currentResult;\n    this.currentResult = this.createResult(this.currentQuery, this.options);\n    this.currentResultState = this.currentQuery.state;\n    this.currentResultOptions = this.options; // Only notify if something has changed\n\n    if (shallowEqualObjects(this.currentResult, prevResult)) {\n      return;\n    } // Determine which callbacks to trigger\n\n\n    var defaultNotifyOptions = {\n      cache: true\n    };\n\n    if ((notifyOptions == null ? void 0 : notifyOptions.listeners) !== false && this.shouldNotifyListeners(this.currentResult, prevResult)) {\n      defaultNotifyOptions.listeners = true;\n    }\n\n    this.notify(_extends({}, defaultNotifyOptions, notifyOptions));\n  };\n\n  _proto.updateQuery = function updateQuery() {\n    var query = this.client.getQueryCache().build(this.client, this.options);\n\n    if (query === this.currentQuery) {\n      return;\n    }\n\n    var prevQuery = this.currentQuery;\n    this.currentQuery = query;\n    this.currentQueryInitialState = query.state;\n    this.previousQueryResult = this.currentResult;\n\n    if (this.hasListeners()) {\n      prevQuery == null ? void 0 : prevQuery.removeObserver(this);\n      query.addObserver(this);\n    }\n  };\n\n  _proto.onQueryUpdate = function onQueryUpdate(action) {\n    var notifyOptions = {};\n\n    if (action.type === 'success') {\n      notifyOptions.onSuccess = true;\n    } else if (action.type === 'error') {\n      notifyOptions.onError = true;\n    }\n\n    this.updateResult(notifyOptions);\n\n    if (this.hasListeners()) {\n      this.updateTimers();\n    }\n  };\n\n  _proto.notify = function notify(notifyOptions) {\n    var _this8 = this;\n\n    notifyManager.batch(function () {\n      // First trigger the configuration callbacks\n      if (notifyOptions.onSuccess) {\n        _this8.options.onSuccess == null ? void 0 : _this8.options.onSuccess(_this8.currentResult.data);\n        _this8.options.onSettled == null ? void 0 : _this8.options.onSettled(_this8.currentResult.data, null);\n      } else if (notifyOptions.onError) {\n        _this8.options.onError == null ? void 0 : _this8.options.onError(_this8.currentResult.error);\n        _this8.options.onSettled == null ? void 0 : _this8.options.onSettled(undefined, _this8.currentResult.error);\n      } // Then trigger the listeners\n\n\n      if (notifyOptions.listeners) {\n        _this8.listeners.forEach(function (listener) {\n          listener(_this8.currentResult);\n        });\n      } // Then the cache listeners\n\n\n      if (notifyOptions.cache) {\n        _this8.client.getQueryCache().notify({\n          query: _this8.currentQuery,\n          type: 'observerResultsUpdated'\n        });\n      }\n    });\n  };\n\n  return QueryObserver;\n}(Subscribable);\n\nfunction shouldLoadOnMount(query, options) {\n  return options.enabled !== false && !query.state.dataUpdatedAt && !(query.state.status === 'error' && options.retryOnMount === false);\n}\n\nfunction shouldRefetchOnMount(query, options) {\n  return options.enabled !== false && query.state.dataUpdatedAt > 0 && (options.refetchOnMount === 'always' || options.refetchOnMount !== false && isStale(query, options));\n}\n\nfunction shouldFetchOnMount(query, options) {\n  return shouldLoadOnMount(query, options) || shouldRefetchOnMount(query, options);\n}\n\nfunction _shouldFetchOnReconnect(query, options) {\n  return options.enabled !== false && (options.refetchOnReconnect === 'always' || options.refetchOnReconnect !== false && isStale(query, options));\n}\n\nfunction _shouldFetchOnWindowFocus(query, options) {\n  return options.enabled !== false && (options.refetchOnWindowFocus === 'always' || options.refetchOnWindowFocus !== false && isStale(query, options));\n}\n\nfunction shouldFetchOptionally(query, prevQuery, options, prevOptions) {\n  return options.enabled !== false && (query !== prevQuery || prevOptions.enabled === false) && isStale(query, options);\n}\n\nfunction isStale(query, options) {\n  return query.isStaleByTime(options.staleTime);\n}","import React from 'react'; // CONTEXT\n\nfunction createValue() {\n  var _isReset = false;\n  return {\n    clearReset: function clearReset() {\n      _isReset = false;\n    },\n    reset: function reset() {\n      _isReset = true;\n    },\n    isReset: function isReset() {\n      return _isReset;\n    }\n  };\n}\n\nvar QueryErrorResetBoundaryContext = /*#__PURE__*/React.createContext(createValue()); // HOOK\n\nexport var useQueryErrorResetBoundary = function useQueryErrorResetBoundary() {\n  return React.useContext(QueryErrorResetBoundaryContext);\n}; // COMPONENT\n\nexport var QueryErrorResetBoundary = function QueryErrorResetBoundary(_ref) {\n  var children = _ref.children;\n  var value = React.useMemo(function () {\n    return createValue();\n  }, []);\n  return /*#__PURE__*/React.createElement(QueryErrorResetBoundaryContext.Provider, {\n    value: value\n  }, typeof children === 'function' ? children(value) : children);\n};","import React from 'react';\nimport { notifyManager } from '../core/notifyManager';\nimport { useQueryErrorResetBoundary } from './QueryErrorResetBoundary';\nimport { useQueryClient } from './QueryClientProvider';\nexport function useBaseQuery(options, Observer) {\n  var mountedRef = React.useRef(false);\n\n  var _React$useState = React.useState(0),\n      forceUpdate = _React$useState[1];\n\n  var queryClient = useQueryClient();\n  var errorResetBoundary = useQueryErrorResetBoundary();\n  var defaultedOptions = queryClient.defaultQueryObserverOptions(options); // Make sure results are optimistically set in fetching state before subscribing or updating options\n\n  defaultedOptions.optimisticResults = true; // Include callbacks in batch renders\n\n  if (defaultedOptions.onError) {\n    defaultedOptions.onError = notifyManager.batchCalls(defaultedOptions.onError);\n  }\n\n  if (defaultedOptions.onSuccess) {\n    defaultedOptions.onSuccess = notifyManager.batchCalls(defaultedOptions.onSuccess);\n  }\n\n  if (defaultedOptions.onSettled) {\n    defaultedOptions.onSettled = notifyManager.batchCalls(defaultedOptions.onSettled);\n  }\n\n  if (defaultedOptions.suspense) {\n    // Always set stale time when using suspense to prevent\n    // fetching again when directly mounting after suspending\n    if (typeof defaultedOptions.staleTime !== 'number') {\n      defaultedOptions.staleTime = 1000;\n    }\n  }\n\n  if (defaultedOptions.suspense || defaultedOptions.useErrorBoundary) {\n    // Prevent retrying failed query if the error boundary has not been reset yet\n    if (!errorResetBoundary.isReset()) {\n      defaultedOptions.retryOnMount = false;\n    }\n  }\n\n  var obsRef = React.useRef();\n\n  if (!obsRef.current) {\n    obsRef.current = new Observer(queryClient, defaultedOptions);\n  }\n\n  var result = obsRef.current.getOptimisticResult(defaultedOptions);\n  React.useEffect(function () {\n    mountedRef.current = true;\n    errorResetBoundary.clearReset();\n    var unsubscribe = obsRef.current.subscribe(notifyManager.batchCalls(function () {\n      if (mountedRef.current) {\n        forceUpdate(function (x) {\n          return x + 1;\n        });\n      }\n    })); // Update result to make sure we did not miss any query updates\n    // between creating the observer and subscribing to it.\n\n    obsRef.current.updateResult();\n    return function () {\n      mountedRef.current = false;\n      unsubscribe();\n    };\n  }, [errorResetBoundary]);\n  React.useEffect(function () {\n    // Do not notify on updates because of changes in the options because\n    // these changes should already be reflected in the optimistic result.\n    obsRef.current.setOptions(defaultedOptions, {\n      listeners: false\n    });\n  }, [defaultedOptions]); // Handle suspense\n\n  if (defaultedOptions.suspense && result.isLoading) {\n    throw obsRef.current.fetchOptimistic(defaultedOptions).then(function (_ref) {\n      var data = _ref.data;\n      defaultedOptions.onSuccess == null ? void 0 : defaultedOptions.onSuccess(data);\n      defaultedOptions.onSettled == null ? void 0 : defaultedOptions.onSettled(data, null);\n    }).catch(function (error) {\n      errorResetBoundary.clearReset();\n      defaultedOptions.onError == null ? void 0 : defaultedOptions.onError(error);\n      defaultedOptions.onSettled == null ? void 0 : defaultedOptions.onSettled(undefined, error);\n    });\n  } // Handle error boundary\n\n\n  if ((defaultedOptions.suspense || defaultedOptions.useErrorBoundary) && result.isError) {\n    throw result.error;\n  } // Handle result property usage tracking\n\n\n  if (defaultedOptions.notifyOnChangeProps === 'tracked') {\n    result = obsRef.current.trackResult(result);\n  }\n\n  return result;\n}","import { QueryObserver } from '../core';\nimport { parseQueryArgs } from '../core/utils';\nimport { useBaseQuery } from './useBaseQuery'; // HOOK\n\nexport function useQuery(arg1, arg2, arg3) {\n  var parsedOptions = parseQueryArgs(arg1, arg2, arg3);\n  return useBaseQuery(parsedOptions, QueryObserver);\n}"]}}