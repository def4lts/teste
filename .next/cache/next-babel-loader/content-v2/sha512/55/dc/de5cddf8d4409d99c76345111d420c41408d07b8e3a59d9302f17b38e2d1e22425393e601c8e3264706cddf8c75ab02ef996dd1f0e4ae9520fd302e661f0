{"ast":null,"code":"import _regeneratorRuntime from \"/home/smoke/\\xC1rea de Trabalho/dashgo/node_modules/next/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/home/smoke/\\xC1rea de Trabalho/dashgo/node_modules/next/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _s = $RefreshSig$();\n\nimport { useQuery } from 'react-query';\nimport { api } from '../api';\n\nfunction getUsers(_x) {\n  return _getUsers.apply(this, arguments);\n}\n\nfunction _getUsers() {\n  _getUsers = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(page) {\n    var _yield$api$get, data, headers, totalCount, users;\n\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return api.get('users', {\n              params: {\n                page: page\n              }\n            });\n\n          case 2:\n            _yield$api$get = _context.sent;\n            data = _yield$api$get.data;\n            headers = _yield$api$get.headers;\n            totalCount = Number(headers['x-total-count']);\n            users = data.users.map(function (user) {\n              return {\n                id: user.id,\n                name: user.name,\n                email: user.email,\n                created_at: new Date(user.created_at).toLocaleDateString('pt-BR', {\n                  day: '2-digit',\n                  month: 'long',\n                  year: 'numeric'\n                })\n              };\n            });\n            return _context.abrupt(\"return\", {\n              users: users,\n              totalCount: totalCount\n            });\n\n          case 8:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _getUsers.apply(this, arguments);\n}\n\nexport function useUsers(page) {\n  _s();\n\n  //return useQuery('users', () => getUsers(page), { \n  return useQuery(['users', page], function () {\n    return getUsers(page);\n  }, {\n    staleTime: 1000 * 60 * 10 //10 minutos\n\n  });\n} // Esse 3.o parâmetro staleTime é opcional.\n// Se for informado, define o tempo que o react-query\n// vai buscar novamente os dados. No caso, após 5 seg.\n// Antes de 5 segundos, os dados são considerados \"Fresh\".\n// Após 5 seg, são considerados stale (antigo), e faz refresh.\n\n_s(useUsers, \"4ZpngI1uv+Uo3WQHEZmTQ5FNM+k=\", false, function () {\n  return [useQuery];\n});","map":{"version":3,"sources":["/home/smoke/Área de Trabalho/dashgo/src/services/hooks/useUsers.ts"],"names":["useQuery","api","getUsers","page","get","params","data","headers","totalCount","Number","users","map","user","id","name","email","created_at","Date","toLocaleDateString","day","month","year","useUsers","staleTime"],"mappings":";;;;;AAAA,SAASA,QAAT,QAAyB,aAAzB;AACA,SAASC,GAAT,QAAoB,QAApB;;SAceC,Q;;;;;uEAAf,iBAAwBC,IAAxB;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAGoCF,GAAG,CAACG,GAAJ,CAAQ,OAAR,EAAiB;AAC7CC,cAAAA,MAAM,EAAE;AAAEF,gBAAAA,IAAI,EAAJA;AAAF;AADqC,aAAjB,CAHpC;;AAAA;AAAA;AAGYG,YAAAA,IAHZ,kBAGYA,IAHZ;AAGkBC,YAAAA,OAHlB,kBAGkBA,OAHlB;AAOUC,YAAAA,UAPV,GAOuBC,MAAM,CAACF,OAAO,CAAC,eAAD,CAAR,CAP7B;AASUG,YAAAA,KATV,GASkBJ,IAAI,CAACI,KAAL,CAAWC,GAAX,CAAe,UAAAC,IAAI,EAAI;AACjC,qBAAO;AACHC,gBAAAA,EAAE,EAAED,IAAI,CAACC,EADN;AAEHC,gBAAAA,IAAI,EAAEF,IAAI,CAACE,IAFR;AAGHC,gBAAAA,KAAK,EAAEH,IAAI,CAACG,KAHT;AAIHC,gBAAAA,UAAU,EAAE,IAAIC,IAAJ,CAASL,IAAI,CAACI,UAAd,EACPE,kBADO,CACY,OADZ,EACqB;AACzBC,kBAAAA,GAAG,EAAE,SADoB;AAEzBC,kBAAAA,KAAK,EAAE,MAFkB;AAGzBC,kBAAAA,IAAI,EAAE;AAHmB,iBADrB;AAJT,eAAP;AAWC,aAZS,CATlB;AAAA,6CAuBW;AACHX,cAAAA,KAAK,EAALA,KADG;AAEHF,cAAAA,UAAU,EAAVA;AAFG,aAvBX;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;AA6BA,OAAO,SAASc,QAAT,CAAkBnB,IAAlB,EAAgC;AAAA;;AACnC;AACA,SAAOH,QAAQ,CAAC,CAAC,OAAD,EAAUG,IAAV,CAAD,EAAkB;AAAA,WAAMD,QAAQ,CAACC,IAAD,CAAd;AAAA,GAAlB,EAAwC;AACnDoB,IAAAA,SAAS,EAAE,OAAO,EAAP,GAAY,EAD4B,CACxB;;AADwB,GAAxC,CAAf;AAGH,C,CAED;AACA;AACA;AACA;AACA;;GAXgBD,Q;UAELtB,Q","sourcesContent":["import { useQuery } from 'react-query'\nimport { api } from '../api'\n\ntype User = {\n    id: string\n    name: string\n    email: string\n    created_at: string\n}\n\ntype UsersResponse = {\n    totalCount: number\n    users: User[]\n}\n\nasync function getUsers(page: number): Promise<UsersResponse> {\n    //const response = await fetch('http://localhost:3000/api/users')\n    //const data = await response.json()\n    const { data, headers } = await api.get('users', {\n        params: { page }\n    })\n\n    const totalCount = Number(headers['x-total-count'])\n\n    const users = data.users.map(user => {\n        return {\n            id: user.id,\n            name: user.name,\n            email: user.email,\n            created_at: new Date(user.created_at)\n                .toLocaleDateString('pt-BR', {\n                    day: '2-digit',\n                    month: 'long',\n                    year: 'numeric'\n                })\n            }\n        })\n\n    return {\n        users,\n        totalCount\n    }\n}\n\nexport function useUsers(page: number) {\n    //return useQuery('users', () => getUsers(page), { \n    return useQuery(['users', page], () => getUsers(page), { \n        staleTime: 1000 * 60 * 10, //10 minutos\n    })\n}\n\n// Esse 3.o parâmetro staleTime é opcional.\n// Se for informado, define o tempo que o react-query\n// vai buscar novamente os dados. No caso, após 5 seg.\n// Antes de 5 segundos, os dados são considerados \"Fresh\".\n// Após 5 seg, são considerados stale (antigo), e faz refresh.\n"]},"metadata":{},"sourceType":"module"}