{"ast":null,"code":"import { useQuery } from \"react-query\";\nimport { api } from \"../api\";\n\nasync function getClients(page) {\n  //const response = await fetch('http://localhost:3000/api/users')\n  //const data = await response.json()\n  const {\n    data\n  } = await api.get(`/clients/${page}`);\n  const totalCount = Number(data.total);\n  const clients = data.clients.map(client => {\n    return {\n      id: client.id,\n      name: client.name,\n      number: client.number,\n      created_at: new Date(client.created_at).toLocaleDateString(\"pt-BR\", {\n        day: \"2-digit\",\n        month: \"long\",\n        year: \"numeric\"\n      })\n    };\n  });\n  return {\n    clients,\n    totalCount\n  };\n}\n\nexport function useClients(page) {\n  //return useQuery('clients', () => getclients(page), {\n  return useQuery([\"client\", page], () => getClients(page), {\n    staleTime: 1000 //10 minutos\n\n  });\n} // Esse 3.o parâmetro staleTime é opcional.\n// Se for informado, define o tempo que o react-query\n// vai buscar novamente os dados. No caso, após 5 seg.\n// Antes de 5 segundos, os dados são considerados \"Fresh\".\n// Após 5 seg, são considerados stale (antigo), e faz refresh.","map":null,"metadata":{},"sourceType":"module"}