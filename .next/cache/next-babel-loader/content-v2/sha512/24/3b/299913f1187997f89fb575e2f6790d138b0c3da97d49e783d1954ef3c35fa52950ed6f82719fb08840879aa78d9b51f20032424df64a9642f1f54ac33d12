{"ast":null,"code":"import _regeneratorRuntime from \"/home/smoke/\\xC1rea de Trabalho/dashgo/node_modules/next/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/home/smoke/\\xC1rea de Trabalho/dashgo/node_modules/next/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { useQuery } from \"react-query\";\nimport { api } from \"../api\";\n\nfunction getClients(_x) {\n  return _getClients.apply(this, arguments);\n}\n\nfunction _getClients() {\n  _getClients = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(page) {\n    var _yield$api$get, data, totalCount, clients;\n\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return api.get(\"/clients/\".concat(page));\n\n          case 2:\n            _yield$api$get = _context.sent;\n            data = _yield$api$get.data;\n            totalCount = Number(data.total);\n            clients = data.clients.map(function (client) {\n              return {\n                id: client.id,\n                name: client.name,\n                number: client.number,\n                created_at: new Date(client.created_at).toLocaleDateString(\"pt-BR\", {\n                  day: \"2-digit\",\n                  month: \"long\",\n                  year: \"numeric\"\n                })\n              };\n            });\n            return _context.abrupt(\"return\", {\n              clients: clients,\n              totalCount: totalCount\n            });\n\n          case 7:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _getClients.apply(this, arguments);\n}\n\nexport function useClients(page) {\n  //return useQuery('clients', () => getclients(page), {\n  return useQuery([\"client\", page], function () {\n    return getClients(page);\n  }, {\n    staleTime: 1000 //10 minutos\n\n  });\n} // Esse 3.o parâmetro staleTime é opcional.\n// Se for informado, define o tempo que o react-query\n// vai buscar novamente os dados. No caso, após 5 seg.\n// Antes de 5 segundos, os dados são considerados \"Fresh\".\n// Após 5 seg, são considerados stale (antigo), e faz refresh.","map":null,"metadata":{},"sourceType":"module"}