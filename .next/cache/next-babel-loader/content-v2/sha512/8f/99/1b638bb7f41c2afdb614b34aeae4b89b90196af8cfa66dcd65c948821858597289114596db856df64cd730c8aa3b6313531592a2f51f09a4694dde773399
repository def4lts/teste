{"ast":null,"code":"import _regeneratorRuntime from \"/home/smoke/\\xC1rea de Trabalho/dashgo/node_modules/next/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/home/smoke/\\xC1rea de Trabalho/dashgo/node_modules/next/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _s = $RefreshSig$();\n\nimport { useQuery } from \"react-query\";\nimport { api } from \"../api\";\n\nfunction getProducts(_x) {\n  return _getProducts.apply(this, arguments);\n}\n\nfunction _getProducts() {\n  _getProducts = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(page) {\n    var _yield$api$get, data, totalCount, products;\n\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return api.get(\"/products/\".concat(page));\n\n          case 2:\n            _yield$api$get = _context.sent;\n            data = _yield$api$get.data;\n            totalCount = Number(data.total);\n            products = data.products.map(function (product) {\n              return {\n                id: product.id,\n                sold: product.sold,\n                number: product.number,\n                month: product.month,\n                year: product.year,\n                cvv: product.cvv,\n                category_id: product.category_id,\n                created_at: new Date(product.created_at).toLocaleDateString(\"pt-BR\", {\n                  day: \"2-digit\",\n                  month: \"long\",\n                  year: \"numeric\"\n                })\n              };\n            });\n            return _context.abrupt(\"return\", {\n              products: products,\n              totalCount: totalCount\n            });\n\n          case 7:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _getProducts.apply(this, arguments);\n}\n\nexport function useProducts(page) {\n  _s();\n\n  return useQuery([\"product\", page], function () {\n    return getProducts(page);\n  }, {\n    staleTime: 1000\n  });\n}\n\n_s(useProducts, \"4ZpngI1uv+Uo3WQHEZmTQ5FNM+k=\", false, function () {\n  return [useQuery];\n});","map":{"version":3,"sources":["/home/smoke/√Årea de Trabalho/dashgo/src/services/hooks/useProducts.ts"],"names":["useQuery","api","getProducts","page","get","data","totalCount","Number","total","products","map","product","id","sold","number","month","year","cvv","category_id","created_at","Date","toLocaleDateString","day","useProducts","staleTime"],"mappings":";;;;;AAAA,SAASA,QAAT,QAAyB,aAAzB;AACA,SAASC,GAAT,QAAoB,QAApB;;SAkBeC,W;;;;;0EAAf,iBAA2BC,IAA3B;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAGyBF,GAAG,CAACG,GAAJ,qBAAqBD,IAArB,EAHzB;;AAAA;AAAA;AAGUE,YAAAA,IAHV,kBAGUA,IAHV;AAKQC,YAAAA,UALR,GAKqBC,MAAM,CAACF,IAAI,CAACG,KAAN,CAL3B;AAOQC,YAAAA,QAPR,GAOmBJ,IAAI,CAACI,QAAL,CAAcC,GAAd,CAAkB,UAACC,OAAD,EAAsB;AACvD,qBAAO;AACLC,gBAAAA,EAAE,EAAED,OAAO,CAACC,EADP;AAELC,gBAAAA,IAAI,EAAEF,OAAO,CAACE,IAFT;AAGLC,gBAAAA,MAAM,EAAEH,OAAO,CAACG,MAHX;AAILC,gBAAAA,KAAK,EAAEJ,OAAO,CAACI,KAJV;AAKLC,gBAAAA,IAAI,EAAEL,OAAO,CAACK,IALT;AAMLC,gBAAAA,GAAG,EAAEN,OAAO,CAACM,GANR;AAOLC,gBAAAA,WAAW,EAAEP,OAAO,CAACO,WAPhB;AAQLC,gBAAAA,UAAU,EAAE,IAAIC,IAAJ,CAAST,OAAO,CAACQ,UAAjB,EAA6BE,kBAA7B,CAAgD,OAAhD,EAAyD;AACnEC,kBAAAA,GAAG,EAAE,SAD8D;AAEnEP,kBAAAA,KAAK,EAAE,MAF4D;AAGnEC,kBAAAA,IAAI,EAAE;AAH6D,iBAAzD;AARP,eAAP;AAcD,aAfgB,CAPnB;AAAA,6CAwBS;AACLP,cAAAA,QAAQ,EAARA,QADK;AAELH,cAAAA,UAAU,EAAVA;AAFK,aAxBT;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;AA8BA,OAAO,SAASiB,WAAT,CAAqBpB,IAArB,EAAmC;AAAA;;AACxC,SAAOH,QAAQ,CAAC,CAAC,SAAD,EAAYG,IAAZ,CAAD,EAAoB;AAAA,WAAMD,WAAW,CAACC,IAAD,CAAjB;AAAA,GAApB,EAA6C;AAC1DqB,IAAAA,SAAS,EAAE;AAD+C,GAA7C,CAAf;AAGD;;GAJeD,W;UACPvB,Q","sourcesContent":["import { useQuery } from \"react-query\";\nimport { api } from \"../api\";\n\ntype Product = {\n  id: string;\n  sold: boolean;\n  number: string;\n  month: string;\n  year: string;\n  cvv: string;\n  category_id: string;\n  created_at: string;\n};\n\ntype UsersResponse = {\n  totalCount: number;\n  products: Product[];\n};\n\nasync function getProducts(page: number): Promise<UsersResponse> {\n  //const response = await fetch('http://localhost:3000/api/users')\n  //const data = await response.json()\n  const { data } = await api.get(`/products/${page}`);\n\n  const totalCount = Number(data.total);\n\n  const products = data.products.map((product: Product) => {\n    return {\n      id: product.id,\n      sold: product.sold,\n      number: product.number,\n      month: product.month,\n      year: product.year,\n      cvv: product.cvv,\n      category_id: product.category_id,\n      created_at: new Date(product.created_at).toLocaleDateString(\"pt-BR\", {\n        day: \"2-digit\",\n        month: \"long\",\n        year: \"numeric\",\n      }),\n    };\n  });\n\n  return {\n    products,\n    totalCount,\n  };\n}\n\nexport function useProducts(page: number) {\n  return useQuery([\"product\", page], () => getProducts(page), {\n    staleTime: 1000,\n  });\n}\n"]},"metadata":{},"sourceType":"module"}