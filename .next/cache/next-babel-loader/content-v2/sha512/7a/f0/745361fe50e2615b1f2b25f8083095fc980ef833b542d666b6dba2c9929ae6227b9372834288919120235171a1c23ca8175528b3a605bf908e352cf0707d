{"ast":null,"code":"import { useQuery } from 'react-query';\nimport { api } from '../api';\n\nasync function getUsers(page) {\n  //const response = await fetch('http://localhost:3000/api/users')\n  //const data = await response.json()\n  const {\n    data,\n    headers\n  } = await api.get('users', {\n    params: {\n      page\n    }\n  });\n  const totalCount = Number(headers['x-total-count']);\n  const users = data.users.map(user => {\n    return {\n      id: user.id,\n      name: user.name,\n      email: user.email,\n      created_at: new Date(user.created_at).toLocaleDateString('pt-BR', {\n        day: '2-digit',\n        month: 'long',\n        year: 'numeric'\n      })\n    };\n  });\n  return {\n    users,\n    totalCount\n  };\n}\n\nexport function useUsers(page) {\n  //return useQuery('users', () => getUsers(page), { \n  return useQuery(['users', page], () => getUsers(page), {\n    staleTime: 1000 * 60 * 10 //10 minutos\n\n  });\n} // Esse 3.o parâmetro staleTime é opcional.\n// Se for informado, define o tempo que o react-query\n// vai buscar novamente os dados. No caso, após 5 seg.\n// Antes de 5 segundos, os dados são considerados \"Fresh\".\n// Após 5 seg, são considerados stale (antigo), e faz refresh.","map":{"version":3,"sources":["/home/smoke/Área de Trabalho/dashgo/src/services/hooks/useUsers.ts"],"names":["useQuery","api","getUsers","page","data","headers","get","params","totalCount","Number","users","map","user","id","name","email","created_at","Date","toLocaleDateString","day","month","year","useUsers","staleTime"],"mappings":"AAAA,SAASA,QAAT,QAAyB,aAAzB;AACA,SAASC,GAAT,QAAoB,QAApB;;AAcA,eAAeC,QAAf,CAAwBC,IAAxB,EAA8D;AAC1D;AACA;AACA,QAAM;AAAEC,IAAAA,IAAF;AAAQC,IAAAA;AAAR,MAAoB,MAAMJ,GAAG,CAACK,GAAJ,CAAQ,OAAR,EAAiB;AAC7CC,IAAAA,MAAM,EAAE;AAAEJ,MAAAA;AAAF;AADqC,GAAjB,CAAhC;AAIA,QAAMK,UAAU,GAAGC,MAAM,CAACJ,OAAO,CAAC,eAAD,CAAR,CAAzB;AAEA,QAAMK,KAAK,GAAGN,IAAI,CAACM,KAAL,CAAWC,GAAX,CAAeC,IAAI,IAAI;AACjC,WAAO;AACHC,MAAAA,EAAE,EAAED,IAAI,CAACC,EADN;AAEHC,MAAAA,IAAI,EAAEF,IAAI,CAACE,IAFR;AAGHC,MAAAA,KAAK,EAAEH,IAAI,CAACG,KAHT;AAIHC,MAAAA,UAAU,EAAE,IAAIC,IAAJ,CAASL,IAAI,CAACI,UAAd,EACPE,kBADO,CACY,OADZ,EACqB;AACzBC,QAAAA,GAAG,EAAE,SADoB;AAEzBC,QAAAA,KAAK,EAAE,MAFkB;AAGzBC,QAAAA,IAAI,EAAE;AAHmB,OADrB;AAJT,KAAP;AAWC,GAZS,CAAd;AAcA,SAAO;AACHX,IAAAA,KADG;AAEHF,IAAAA;AAFG,GAAP;AAIH;;AAED,OAAO,SAASc,QAAT,CAAkBnB,IAAlB,EAAgC;AACnC;AACA,SAAOH,QAAQ,CAAC,CAAC,OAAD,EAAUG,IAAV,CAAD,EAAkB,MAAMD,QAAQ,CAACC,IAAD,CAAhC,EAAwC;AACnDoB,IAAAA,SAAS,EAAE,OAAO,EAAP,GAAY,EAD4B,CACxB;;AADwB,GAAxC,CAAf;AAGH,C,CAED;AACA;AACA;AACA;AACA","sourcesContent":["import { useQuery } from 'react-query'\nimport { api } from '../api'\n\ntype User = {\n    id: string\n    name: string\n    email: string\n    created_at: string\n}\n\ntype UsersResponse = {\n    totalCount: number\n    users: User[]\n}\n\nasync function getUsers(page: number): Promise<UsersResponse> {\n    //const response = await fetch('http://localhost:3000/api/users')\n    //const data = await response.json()\n    const { data, headers } = await api.get('users', {\n        params: { page }\n    })\n\n    const totalCount = Number(headers['x-total-count'])\n\n    const users = data.users.map(user => {\n        return {\n            id: user.id,\n            name: user.name,\n            email: user.email,\n            created_at: new Date(user.created_at)\n                .toLocaleDateString('pt-BR', {\n                    day: '2-digit',\n                    month: 'long',\n                    year: 'numeric'\n                })\n            }\n        })\n\n    return {\n        users,\n        totalCount\n    }\n}\n\nexport function useUsers(page: number) {\n    //return useQuery('users', () => getUsers(page), { \n    return useQuery(['users', page], () => getUsers(page), { \n        staleTime: 1000 * 60 * 10, //10 minutos\n    })\n}\n\n// Esse 3.o parâmetro staleTime é opcional.\n// Se for informado, define o tempo que o react-query\n// vai buscar novamente os dados. No caso, após 5 seg.\n// Antes de 5 segundos, os dados são considerados \"Fresh\".\n// Após 5 seg, são considerados stale (antigo), e faz refresh.\n"]},"metadata":{},"sourceType":"module"}