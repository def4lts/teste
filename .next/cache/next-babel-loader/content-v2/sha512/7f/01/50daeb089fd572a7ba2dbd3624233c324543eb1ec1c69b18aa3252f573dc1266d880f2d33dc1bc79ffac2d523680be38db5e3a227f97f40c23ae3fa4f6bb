{"ast":null,"code":"import { jsx as _jsx } from \"react/jsx-runtime\";\nimport { useEffect, useRef } from \"react\";\nexport function Matrix(_ref) {\n  var _ref$timeout = _ref.timeout,\n      timeout = _ref$timeout === void 0 ? 50 : _ref$timeout;\n  var canvasRef = useRef(null);\n  useEffect(function () {\n    if (canvasRef.current) {\n      var canvas = canvasRef.current;\n      var context = canvas.getContext(\"2d\");\n      var width = document.body.offsetWidth;\n      var height = document.body.offsetHeight;\n      canvas.width = width;\n      canvas.height = height;\n      context.fillStyle = \"#8888\";\n      context.fillRect(0, 0, width, height);\n      var columns = Math.floor(width / 20) + 1;\n      var yPositions = Array.from({\n        length: columns\n      }).fill(0);\n      context.fillStyle = \"#8888\";\n      context.fillRect(0, 0, width, height);\n\n      var matrixEffect = function matrixEffect() {\n        context.fillStyle = \"#0001\";\n        context.fillRect(0, 0, width, height);\n        context.fillStyle = \"#3ca300\";\n        context.font = \"8pt monospace\";\n        yPositions.forEach(function (y, index) {\n          var text = String.fromCharCode(Math.random() * 128);\n          var x = index * 20;\n          context.fillText(text, x, y);\n\n          if (y > 100 + Math.random() * 10000) {\n            yPositions[index] = 0;\n          } else {\n            yPositions[index] = y + 20;\n          }\n        });\n      };\n\n      var interval = setInterval(matrixEffect, timeout);\n      return function () {\n        clearInterval(interval);\n      };\n    }\n  }, [canvasRef, timeout]);\n  return /*#__PURE__*/_jsx(\"canvas\", {\n    width: 0,\n    height: 0,\n    ref: canvasRef\n  });\n}","map":null,"metadata":{},"sourceType":"module"}