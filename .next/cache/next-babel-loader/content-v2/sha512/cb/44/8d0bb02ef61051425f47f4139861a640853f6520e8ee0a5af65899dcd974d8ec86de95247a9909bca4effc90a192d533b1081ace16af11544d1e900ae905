{"ast":null,"code":"import { useQuery } from \"react-query\";\nimport { api } from \"../api\";\n\nasync function getClients(page) {\n  //const response = await fetch('http://localhost:3000/api/users')\n  //const data = await response.json()\n  const {\n    data,\n    headers\n  } = await api.get(`/clients/${page}`);\n  const totalCount = Number(headers[\"x-total-count\"]);\n  const clients = data.clients.map(client => {\n    console.log(\"cheguei aq\");\n    return {\n      id: client.id,\n      name: client.name,\n      number: client.number,\n      created_at: new Date(client.created_at).toLocaleDateString(\"pt-BR\", {\n        day: \"2-digit\",\n        month: \"long\",\n        year: \"numeric\"\n      })\n    };\n  });\n  console.log(clients);\n  return {\n    clients,\n    totalCount\n  };\n}\n\nexport function useClients(page) {\n  //return useQuery('clients', () => getclients(page), {\n  return useQuery([\"client\", page], () => getClients(page), {\n    staleTime: 1000 //10 minutos\n\n  });\n} // Esse 3.o parâmetro staleTime é opcional.\n// Se for informado, define o tempo que o react-query\n// vai buscar novamente os dados. No caso, após 5 seg.\n// Antes de 5 segundos, os dados são considerados \"Fresh\".\n// Após 5 seg, são considerados stale (antigo), e faz refresh.","map":{"version":3,"sources":["/home/smoke/Área de Trabalho/dashgo/src/services/hooks/useClients.ts"],"names":["useQuery","api","getClients","page","data","headers","get","totalCount","Number","clients","map","client","console","log","id","name","number","created_at","Date","toLocaleDateString","day","month","year","useClients","staleTime"],"mappings":"AAAA,SAASA,QAAT,QAAyB,aAAzB;AACA,SAASC,GAAT,QAAoB,QAApB;;AAcA,eAAeC,UAAf,CAA0BC,IAA1B,EAAgE;AAC9D;AACA;AACA,QAAM;AAAEC,IAAAA,IAAF;AAAQC,IAAAA;AAAR,MAAoB,MAAMJ,GAAG,CAACK,GAAJ,CAAS,YAAWH,IAAK,EAAzB,CAAhC;AAEA,QAAMI,UAAU,GAAGC,MAAM,CAACH,OAAO,CAAC,eAAD,CAAR,CAAzB;AAEA,QAAMI,OAAO,GAAGL,IAAI,CAACK,OAAL,CAAaC,GAAb,CAAkBC,MAAD,IAAoB;AACnDC,IAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ;AACA,WAAO;AACLC,MAAAA,EAAE,EAAEH,MAAM,CAACG,EADN;AAELC,MAAAA,IAAI,EAAEJ,MAAM,CAACI,IAFR;AAGLC,MAAAA,MAAM,EAAEL,MAAM,CAACK,MAHV;AAILC,MAAAA,UAAU,EAAE,IAAIC,IAAJ,CAASP,MAAM,CAACM,UAAhB,EAA4BE,kBAA5B,CAA+C,OAA/C,EAAwD;AAClEC,QAAAA,GAAG,EAAE,SAD6D;AAElEC,QAAAA,KAAK,EAAE,MAF2D;AAGlEC,QAAAA,IAAI,EAAE;AAH4D,OAAxD;AAJP,KAAP;AAUD,GAZe,CAAhB;AAcAV,EAAAA,OAAO,CAACC,GAAR,CAAYJ,OAAZ;AAEA,SAAO;AACLA,IAAAA,OADK;AAELF,IAAAA;AAFK,GAAP;AAID;;AAED,OAAO,SAASgB,UAAT,CAAoBpB,IAApB,EAAkC;AACvC;AACA,SAAOH,QAAQ,CAAC,CAAC,QAAD,EAAWG,IAAX,CAAD,EAAmB,MAAMD,UAAU,CAACC,IAAD,CAAnC,EAA2C;AACxDqB,IAAAA,SAAS,EAAE,IAD6C,CACvC;;AADuC,GAA3C,CAAf;AAGD,C,CAED;AACA;AACA;AACA;AACA","sourcesContent":["import { useQuery } from \"react-query\";\nimport { api } from \"../api\";\n\ntype Client = {\n  id: string;\n  name: string;\n  number: string;\n  created_at: string;\n};\n\ntype UsersResponse = {\n  totalCount: number;\n  clients: Client[];\n};\n\nasync function getClients(page: number): Promise<UsersResponse> {\n  //const response = await fetch('http://localhost:3000/api/users')\n  //const data = await response.json()\n  const { data, headers } = await api.get(`/clients/${page}`);\n\n  const totalCount = Number(headers[\"x-total-count\"]);\n\n  const clients = data.clients.map((client: Client) => {\n    console.log(\"cheguei aq\");\n    return {\n      id: client.id,\n      name: client.name,\n      number: client.number,\n      created_at: new Date(client.created_at).toLocaleDateString(\"pt-BR\", {\n        day: \"2-digit\",\n        month: \"long\",\n        year: \"numeric\",\n      }),\n    };\n  });\n\n  console.log(clients);\n\n  return {\n    clients,\n    totalCount,\n  };\n}\n\nexport function useClients(page: number) {\n  //return useQuery('clients', () => getclients(page), {\n  return useQuery([\"client\", page], () => getClients(page), {\n    staleTime: 1000, //10 minutos\n  });\n}\n\n// Esse 3.o parâmetro staleTime é opcional.\n// Se for informado, define o tempo que o react-query\n// vai buscar novamente os dados. No caso, após 5 seg.\n// Antes de 5 segundos, os dados são considerados \"Fresh\".\n// Após 5 seg, são considerados stale (antigo), e faz refresh.\n"]},"metadata":{},"sourceType":"module"}