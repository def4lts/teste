{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/smoke/\\xC1rea de Trabalho/dashgo/src/components/Pagination/index.tsx\";\nimport { Stack, HStack, Text, Box } from \"@chakra-ui/react\";\nimport { useMemo } from \"react\";\nimport { Page } from \"./Page\";\nconst siblingsCount = 1; // 1 página anterior + 1 página posterior\n\nfunction generatePagesArray(from, to) {\n  const qtItens = to - from;\n  let array = [];\n\n  if (to > from) {\n    for (let i = 0; i < qtItens; i++) {\n      array.push(from + i + 1);\n    }\n  }\n\n  return array;\n}\n\nexport function Pagination({\n  totalCountOfRegisters,\n  registersPerPage = 10,\n  currentPage = 1,\n  onPageChange\n}) {\n  const lastPage = useMemo(() => Math.ceil(totalCountOfRegisters / registersPerPage), [totalCountOfRegisters, registersPerPage]);\n  const previousPages = useMemo(() => currentPage > 1 ? generatePagesArray(currentPage - 1 - siblingsCount, currentPage - 1) : [], [currentPage]);\n  const nextPages = useMemo(() => currentPage < lastPage ? generatePagesArray(currentPage, Math.min(currentPage + siblingsCount, lastPage)) : [], [currentPage]);\n  return /*#__PURE__*/_jsxDEV(Stack, {\n    direction: [\"column\", \"row\"],\n    mt: \"8\",\n    justify: \"space-between\",\n    align: \"center\",\n    spacing: \"6\",\n    children: [/*#__PURE__*/_jsxDEV(Box, {\n      children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n        children: \"0\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 9\n      }, this), \" - \", /*#__PURE__*/_jsxDEV(\"strong\", {\n        children: \"10\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 30\n      }, this), \" de\", \" \", /*#__PURE__*/_jsxDEV(\"strong\", {\n        children: totalCountOfRegisters\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(HStack, {\n      spacing: \"2\",\n      children: [currentPage > 1 + siblingsCount && /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(Page, {\n          onPageChange: onPageChange,\n          number: 1\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 13\n        }, this), currentPage > 2 + siblingsCount && /*#__PURE__*/_jsxDEV(Text, {\n          color: \"gray.300\",\n          width: \"8\",\n          textAlign: \"center\",\n          children: \"...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true), previousPages.length > 0 && previousPages.map(page => /*#__PURE__*/_jsxDEV(Page, {\n        onPageChange: onPageChange,\n        number: page\n      }, page, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 13\n      }, this)), /*#__PURE__*/_jsxDEV(Page, {\n        onPageChange: onPageChange,\n        number: currentPage,\n        isCurrent: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 9\n      }, this), nextPages.length > 0 && nextPages.map(page => /*#__PURE__*/_jsxDEV(Page, {\n        onPageChange: onPageChange,\n        number: page\n      }, page, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 13\n      }, this)), currentPage + siblingsCount < lastPage && /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [currentPage + 1 + siblingsCount < lastPage && /*#__PURE__*/_jsxDEV(Text, {\n          color: \"gray.300\",\n          width: \"8\",\n          textAlign: \"center\",\n          children: \"...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(Page, {\n          onPageChange: onPageChange,\n          number: lastPage\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 57,\n    columnNumber: 5\n  }, this);\n}","map":{"version":3,"sources":["/home/smoke/Área de Trabalho/dashgo/src/components/Pagination/index.tsx"],"names":["Stack","HStack","Text","Box","useMemo","Page","siblingsCount","generatePagesArray","from","to","qtItens","array","i","push","Pagination","totalCountOfRegisters","registersPerPage","currentPage","onPageChange","lastPage","Math","ceil","previousPages","nextPages","min","length","map","page"],"mappings":"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","sourcesContent":["import { Stack, HStack, Text, Box } from \"@chakra-ui/react\";\nimport { useMemo } from \"react\";\nimport { Page } from \"./Page\";\n\ninterface PaginationProps {\n  totalCountOfRegisters: number;\n  registersPerPage?: number;\n  currentPage?: number;\n  onPageChange: (page: number) => void;\n}\n\nconst siblingsCount = 1; // 1 página anterior + 1 página posterior\n\nfunction generatePagesArray(from: number, to: number) {\n  const qtItens = to - from;\n\n  let array = [];\n  if (to > from) {\n    for (let i = 0; i < qtItens; i++) {\n      array.push(from + i + 1);\n    }\n  }\n  return array;\n}\n\nexport function Pagination({\n  totalCountOfRegisters,\n  registersPerPage = 10,\n  currentPage = 1,\n  onPageChange,\n}: PaginationProps) {\n  const lastPage = useMemo(\n    () => Math.ceil(totalCountOfRegisters / registersPerPage),\n    [totalCountOfRegisters, registersPerPage]\n  );\n\n  const previousPages = useMemo(\n    () =>\n      currentPage > 1\n        ? generatePagesArray(currentPage - 1 - siblingsCount, currentPage - 1)\n        : [],\n    [currentPage]\n  );\n\n  const nextPages = useMemo(\n    () =>\n      currentPage < lastPage\n        ? generatePagesArray(\n            currentPage,\n            Math.min(currentPage + siblingsCount, lastPage)\n          )\n        : [],\n    [currentPage]\n  );\n\n  return (\n    <Stack\n      direction={[\"column\", \"row\"]}\n      mt=\"8\"\n      justify=\"space-between\"\n      align=\"center\"\n      spacing=\"6\"\n    >\n      <Box>\n        <strong>0</strong> - <strong>10</strong> de{\" \"}\n        <strong>{totalCountOfRegisters}</strong>\n      </Box>\n\n      <HStack spacing=\"2\">\n        {currentPage > 1 + siblingsCount && (\n          <>\n            <Page onPageChange={onPageChange} number={1} />\n            {currentPage > 2 + siblingsCount && (\n              <Text color=\"gray.300\" width=\"8\" textAlign=\"center\">\n                ...\n              </Text>\n            )}\n          </>\n        )}\n\n        {previousPages.length > 0 &&\n          previousPages.map((page) => (\n            <Page onPageChange={onPageChange} number={page} key={page} />\n          ))}\n\n        <Page onPageChange={onPageChange} number={currentPage} isCurrent />\n\n        {nextPages.length > 0 &&\n          nextPages.map((page) => (\n            <Page onPageChange={onPageChange} number={page} key={page} />\n          ))}\n\n        {currentPage + siblingsCount < lastPage && (\n          <>\n            {currentPage + 1 + siblingsCount < lastPage && (\n              <Text color=\"gray.300\" width=\"8\" textAlign=\"center\">\n                ...\n              </Text>\n            )}\n            <Page onPageChange={onPageChange} number={lastPage} />\n          </>\n        )}\n      </HStack>\n    </Stack>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}