{"ast":null,"code":"import { jsx as _jsx } from \"react/jsx-runtime\";\nimport { createContext, useEffect, useState } from \"react\";\nimport { api } from \"../services/api\";\nimport Router from \"next/router\";\nimport { destroyCookie, parseCookies, setCookie } from \"nookies\";\nexport const AuthContext = /*#__PURE__*/createContext({});\nexport function signOut() {\n  destroyCookie(undefined, \"0dayTokenFront.token\");\n  destroyCookie(undefined, \"0dayTokenFront.refreshToken\");\n  Router.push(\"/\");\n}\nexport function AuthProvider({\n  children\n}) {\n  const {\n    0: user,\n    1: setUser\n  } = useState();\n  const isAuthenticated = !!user;\n  useEffect(() => {\n    const {\n      \"0dayTokenFront.token\": token\n    } = parseCookies();\n\n    if (token) {\n      api.get(\"/users/view\").then(response => {\n        const {\n          id,\n          name,\n          username,\n          avatarUrl\n        } = response.data;\n        setUser({\n          id,\n          name,\n          username,\n          avatarUrl\n        });\n      }).catch(() => {\n        signOut();\n      });\n    }\n  }, []);\n\n  async function signIn({\n    username,\n    password\n  }) {\n    try {\n      const response = await api.post(\"/sessions\", {\n        username,\n        password\n      });\n      const {\n        token,\n        refreshToken\n      } = response.data;\n      setCookie(undefined, \"0dayTokenFront.token\", token, {\n        maxAge: 60 * 60 * 24 * 30,\n        //30 days\n        path: \"/\"\n      });\n      setCookie(undefined, \"0dayTokenFront.refreshToken\", refreshToken, {\n        maxAge: 60 * 60 * 24 * 30,\n        //30 days\n        path: \"/\"\n      });\n      api.defaults.headers[\"Authorization\"] = `Bearer ${token}`;\n      const userDate = await api.get(\"/users/view\");\n      const {\n        name,\n        id,\n        avatarUrl\n      } = userDate.data;\n      setUser({\n        id,\n        name,\n        username,\n        avatarUrl\n      });\n      Router.push(\"/dashboard\");\n    } catch (err) {\n      console.log(err);\n    }\n  }\n\n  return /*#__PURE__*/_jsx(AuthContext.Provider, {\n    value: {\n      signIn,\n      isAuthenticated,\n      user\n    },\n    children: children\n  });\n}","map":null,"metadata":{},"sourceType":"module"}