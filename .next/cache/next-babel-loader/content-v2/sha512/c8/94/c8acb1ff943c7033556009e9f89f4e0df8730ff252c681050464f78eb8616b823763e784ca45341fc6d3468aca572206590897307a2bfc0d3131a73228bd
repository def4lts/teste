{"ast":null,"code":"import { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { Box, Flex, Heading, Divider, Textarea, Menu, MenuButton, MenuList, MenuItem, useToast } from \"@chakra-ui/react\";\nimport { HStack, Button } from \"@chakra-ui/react\";\nimport { useForm } from \"react-hook-form\";\nimport * as yup from \"yup\";\nimport { yupResolver } from \"@hookform/resolvers/yup\";\nimport { Header } from \"../../components/Header\";\nimport { Sidebar } from \"../../components/Sidebar\";\nimport { api } from \"../../services/api\";\nimport { ChevronDownIcon } from \"@chakra-ui/icons\";\nimport { useCategories } from \"../../services/hooks/useCategories\";\nlet categoryId;\n\nclass Cartao {\n  constructor(number, month, year, cvv, category_id) {\n    _defineProperty(this, \"number\", void 0);\n\n    _defineProperty(this, \"month\", void 0);\n\n    _defineProperty(this, \"year\", void 0);\n\n    _defineProperty(this, \"cvv\", void 0);\n\n    _defineProperty(this, \"category_id\", void 0);\n\n    if (number === undefined || number.length <= 0 || month === undefined || month.length <= 0 || year === undefined || year.length <= 0 || cvv === undefined || cvv.length <= 0) {}\n\n    this.number = number;\n    this.month = month;\n    this.year = year;\n    this.cvv = cvv;\n    this.category_id = categoryId;\n  }\n\n}\n\nconst createUserSchema = yup.object().shape({\n  cards: yup.string().required(\"Cartões obrigatórios\")\n});\n\nfunction filter_array(CardList) {\n  let index = -1;\n  const arr_length = CardList ? CardList.length : 0;\n  let resIndex = -1;\n  const result = [];\n\n  while (++index < arr_length) {\n    const value = CardList[index];\n\n    if (value) {\n      result[++resIndex] = value;\n    }\n  }\n\n  return result;\n}\n\nasync function start(cardArray, toast) {\n  cardArray.forEach(async (dado, index) => {\n    setTimeout(async function () {\n      let number = String(dado).split(\"|\")[0];\n      let month = String(dado).split(\"|\")[1];\n      let year = String(dado).split(\"|\")[2];\n      let cvv = String(dado).split(\"|\")[3];\n      const response = await api.post(\"/products\", {\n        number: number,\n        month: month,\n        year: year,\n        cvv: cvv,\n        category_id: categoryId\n      });\n      const responseIds = await api.get(\"/products/1\");\n      const inserir = responseIds.data.productsIds;\n      inserir.push(String(response.data.id));\n      const relation = await api.post(\"/users/products\", {\n        products_id: inserir\n      });\n      toast({\n        title: \"Cartão enviado com sucesso!\",\n        status: \"success\"\n      });\n    }, 1000 * (index + 1));\n  });\n}\n\nexport default function CreateUser() {\n  const {\n    data,\n    isLoading,\n    isFetching,\n    error\n  } = useCategories();\n  const toast = useToast();\n  const {\n    register,\n    handleSubmit,\n    formState\n  } = useForm({\n    resolver: yupResolver(createUserSchema)\n  });\n  const errors = formState.errors; //const handleCreateUser: SubmitHandler<CreateUserFormData) = (values) => {\n\n  async function handleCreateCard(values) {\n    const cardList = values.cards.replace(\"\\r\", \"\").split(\"\\n\");\n    const cardArray = filter_array(cardList);\n    start(cardArray, toast); //router.push(\"/users\"); //volta para a listagem de usuários\n  }\n\n  let selectCategory;\n  return /*#__PURE__*/_jsxs(Box, {\n    children: [/*#__PURE__*/_jsx(Header, {}), /*#__PURE__*/_jsxs(Flex, {\n      w: \"100%\",\n      my: \"6\",\n      maxWidth: 1480,\n      mx: \"auto\",\n      px: \"6\",\n      children: [/*#__PURE__*/_jsx(Sidebar, {}), /*#__PURE__*/_jsxs(Box, {\n        as: \"form\",\n        flex: \"1\",\n        borderRadius: 8,\n        bg: \"gray.800\",\n        p: [\"4\", \"8\"],\n        onSubmit: handleSubmit(handleCreateCard),\n        children: [/*#__PURE__*/_jsxs(Flex, {\n          mb: \"8\",\n          justifyContent: \"space-between\",\n          align: \"center\",\n          children: [/*#__PURE__*/_jsx(Heading, {\n            size: \"lg\",\n            fontWeight: \"normal\",\n            children: \"Upload Cart\\xF5es\"\n          }), /*#__PURE__*/_jsx(Menu, {\n            children: ({\n              isOpen\n            }) => /*#__PURE__*/_jsxs(_Fragment, {\n              children: [/*#__PURE__*/_jsx(MenuButton, {\n                isActive: isOpen,\n                as: Button,\n                colorScheme: \"messenger\",\n                rightIcon: /*#__PURE__*/_jsx(ChevronDownIcon, {}),\n                children: isOpen ? \"Fechar\" : selectCategory ? selectCategory : \"Categoria\"\n              }), /*#__PURE__*/_jsx(MenuList, {\n                children: data === null || data === void 0 ? void 0 : data.categories.map(category => /*#__PURE__*/_jsx(MenuItem, {\n                  color: \"black\",\n                  onClick: () => {\n                    categoryId = category.id;\n                    selectCategory = category.name;\n                  },\n                  children: category.name\n                }, category.id))\n              })]\n            })\n          })]\n        }), /*#__PURE__*/_jsx(Divider, {\n          my: \"6\",\n          borderColor: \"gray.700\"\n        }), /*#__PURE__*/_jsx(Textarea, _objectSpread({\n          placeholder: \"4552250055368113|08|2023|113\",\n          h: \"400px\"\n        }, register(\"cards\"))), /*#__PURE__*/_jsx(Flex, {\n          mt: \"8\",\n          justify: \"flex-end\",\n          children: /*#__PURE__*/_jsxs(HStack, {\n            spacing: \"4\",\n            children: [/*#__PURE__*/_jsx(Button, {\n              as: \"a\",\n              colorScheme: \"whiteAlpha\",\n              href: \"/users\",\n              children: \"Cancelar\"\n            }), /*#__PURE__*/_jsx(Button, {\n              type: \"submit\",\n              isLoading: formState.isSubmitting,\n              colorScheme: \"messenger\",\n              children: \"Salvar\"\n            })]\n          })\n        })]\n      })]\n    })]\n  });\n}","map":null,"metadata":{},"sourceType":"module"}