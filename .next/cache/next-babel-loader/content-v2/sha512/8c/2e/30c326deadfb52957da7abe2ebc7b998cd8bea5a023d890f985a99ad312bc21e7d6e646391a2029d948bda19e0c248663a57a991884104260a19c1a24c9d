{"ast":null,"code":"import _defineProperty from \"/home/smoke/\\xC1rea de Trabalho/dashgo/node_modules/next/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport _objectWithoutProperties from \"/home/smoke/\\xC1rea de Trabalho/dashgo/node_modules/next/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\n\nvar _jsxFileName = \"/home/smoke/\\xC1rea de Trabalho/dashgo/src/components/Sidebar/ActiveLink.tsx\",\n    _s = $RefreshSig$();\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport Link from \"next/link\";\nimport { useRouter } from \"next/router\";\nimport { useMemo } from \"react\";\nimport { cloneElement } from 'react';\n// ReactElement é diferente do ReactNode:\n// ReactNode: aceita Tags, Texto, número e outros componentes dentro\n// ReactElement: só aceita outros componentes dentro.\n// cloneElement: permite clonar o primeiro elemento (no caso, o children),\n// que vem dentro do componente (no caso, Link) e modificar alguma \n// propriedade dele (no caso, a cor).\nexport function ActiveLink(_ref) {\n  _s();\n\n  var children = _ref.children,\n      _ref$exactHref = _ref.exactHref,\n      exactHref = _ref$exactHref === void 0 ? false : _ref$exactHref,\n      rest = _objectWithoutProperties(_ref, [\"children\", \"exactHref\"]);\n\n  var _useRouter = useRouter(),\n      asPath = _useRouter.asPath;\n\n  var isActive = useMemo(function () {\n    if (exactHref) {\n      return asPath === rest.href || asPath === rest.as;\n    } else {\n      return asPath.startsWith(String(rest.href)) || asPath.startsWith(String(rest.as));\n    }\n  }, [asPath]);\n  /* \n      let isActive = false\n      if (asPath === rest.href || asPath === rest.as ||\n          asPath.startsWith(String(rest.href)) ||\n          asPath.startsWith(String(rest.as))) {\n          isActive = true\n      }\n  */\n\n  return /*#__PURE__*/_jsxDEV(Link, _objectSpread(_objectSpread({}, rest), {}, {\n    children: /*#__PURE__*/cloneElement(children, {\n      color: isActive ? 'messenger.400' : 'gray.50'\n    })\n  }), void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 9\n  }, this);\n}\n\n_s(ActiveLink, \"xeE9sigMsgTbBBNAAt+hlp6nOuw=\", false, function () {\n  return [useRouter];\n});\n\n_c = ActiveLink;\n\nvar _c;\n\n$RefreshReg$(_c, \"ActiveLink\");","map":{"version":3,"sources":["/home/smoke/Área de Trabalho/dashgo/src/components/Sidebar/ActiveLink.tsx"],"names":["Link","useRouter","useMemo","cloneElement","ActiveLink","children","exactHref","rest","asPath","isActive","href","as","startsWith","String","color"],"mappings":";;;;;;;;;;;AAAA,OAAOA,IAAP,MAAgC,WAAhC;AACA,SAASC,SAAT,QAA0B,aAA1B;AACA,SAAuBC,OAAvB,QAAsC,OAAtC;AACA,SAASC,YAAT,QAA6B,OAA7B;AAOA;AACA;AACA;AAEA;AACA;AACA;AAEA,OAAO,SAASC,UAAT,OAA+E;AAAA;;AAAA,MAAzDC,QAAyD,QAAzDA,QAAyD;AAAA,4BAA/CC,SAA+C;AAAA,MAA/CA,SAA+C,+BAAnC,KAAmC;AAAA,MAAzBC,IAAyB;;AAAA,mBAC/DN,SAAS,EADsD;AAAA,MAC1EO,MAD0E,cAC1EA,MAD0E;;AAGlF,MAAMC,QAAQ,GAAGP,OAAO,CAAC,YAAM;AAC3B,QAAII,SAAJ,EAAe;AACX,aAAQE,MAAM,KAAKD,IAAI,CAACG,IAAhB,IAAwBF,MAAM,KAAKD,IAAI,CAACI,EAAhD;AACH,KAFD,MAEO;AACH,aAAQH,MAAM,CAACI,UAAP,CAAkBC,MAAM,CAACN,IAAI,CAACG,IAAN,CAAxB,KACJF,MAAM,CAACI,UAAP,CAAkBC,MAAM,CAACN,IAAI,CAACI,EAAN,CAAxB,CADJ;AAEH;AACJ,GAPuB,EAOrB,CAACH,MAAD,CAPqB,CAAxB;AASJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEI,sBACI,QAAC,IAAD,kCAAUD,IAAV;AAAA,2BACKJ,YAAY,CAACE,QAAD,EAAW;AACpBS,MAAAA,KAAK,EAAEL,QAAQ,GAAG,eAAH,GAAqB;AADhB,KAAX;AADjB;AAAA;AAAA;AAAA;AAAA,UADJ;AAOH;;GA5BeL,U;UACOH,S;;;KADPG,U","sourcesContent":["import Link, { LinkProps } from \"next/link\"\nimport { useRouter } from \"next/router\"\nimport { ReactElement, useMemo } from \"react\"\nimport { cloneElement } from 'react'\n\ninterface ActiveLinkProps extends LinkProps {\n    children: ReactElement\n    exactHref?: boolean\n}\n\n// ReactElement é diferente do ReactNode:\n// ReactNode: aceita Tags, Texto, número e outros componentes dentro\n// ReactElement: só aceita outros componentes dentro.\n\n// cloneElement: permite clonar o primeiro elemento (no caso, o children),\n// que vem dentro do componente (no caso, Link) e modificar alguma \n// propriedade dele (no caso, a cor).\n\nexport function ActiveLink({ children, exactHref = false, ...rest }: ActiveLinkProps) {\n    const { asPath } = useRouter()\n    \n    const isActive = useMemo(() => {\n        if (exactHref) {\n            return (asPath === rest.href || asPath === rest.as)\n        } else {\n            return (asPath.startsWith(String(rest.href)) || \n                asPath.startsWith(String(rest.as)))\n        }\n    }, [asPath])\n   \n/* \n    let isActive = false\n    if (asPath === rest.href || asPath === rest.as ||\n        asPath.startsWith(String(rest.href)) ||\n        asPath.startsWith(String(rest.as))) {\n        isActive = true\n    }\n*/\n\n    return (\n        <Link {...rest}>\n            {cloneElement(children, {\n                color: isActive ? 'messenger.400' : 'gray.50'\n            })}\n        </Link>\n    )\n}\n"]},"metadata":{},"sourceType":"module"}