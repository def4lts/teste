{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/smoke/\\xC1rea de Trabalho/dashgo/src/components/FormLogin/Matrix.tsx\";\nimport { useEffect, useRef } from \"react\";\nexport function Matrix({\n  timeout = 50\n}) {\n  const canvasRef = useRef(null);\n  useEffect(() => {\n    if (canvasRef.current) {\n      const canvas = canvasRef.current;\n      const context = canvas.getContext(\"2d\");\n      const width = document.body.offsetWidth;\n      const height = document.body.offsetHeight;\n      canvas.width = width;\n      canvas.height = height;\n      context.fillStyle = \"#8888\";\n      context.fillRect(0, 0, width, height);\n      const columns = Math.floor(width / 20) + 1;\n      const yPositions = Array.from({\n        length: columns\n      }).fill(0);\n      context.fillStyle = \"#8888\";\n      context.fillRect(0, 0, width, height);\n\n      const matrixEffect = () => {\n        context.fillStyle = \"#0001\";\n        context.strokeStyle = \"#FF0000\";\n        context.stroke();\n        context.fillRect(0, 0, width, height);\n        context.fillStyle = \"#0f0\";\n        context.font = \"15pt monospace\";\n        yPositions.forEach((y, index) => {\n          const text = String.fromCharCode(Math.random() * 128);\n          const x = index * 20;\n          context.fillText(text, x, y);\n\n          if (y > 100 + Math.random() * 10000) {\n            yPositions[index] = 0;\n          } else {\n            yPositions[index] = y + 20;\n          }\n        });\n      };\n\n      const interval = setInterval(matrixEffect, timeout);\n      return () => {\n        clearInterval(interval);\n      };\n    }\n  }, [canvasRef, timeout]);\n  return /*#__PURE__*/_jsxDEV(\"canvas\", {\n    ref: canvasRef\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 10\n  }, this);\n}","map":{"version":3,"sources":["/home/smoke/√Årea de Trabalho/dashgo/src/components/FormLogin/Matrix.tsx"],"names":["useEffect","useRef","Matrix","timeout","canvasRef","current","canvas","context","getContext","width","document","body","offsetWidth","height","offsetHeight","fillStyle","fillRect","columns","Math","floor","yPositions","Array","from","length","fill","matrixEffect","strokeStyle","stroke","font","forEach","y","index","text","String","fromCharCode","random","x","fillText","interval","setInterval","clearInterval"],"mappings":";;AAAA,SAASA,SAAT,EAAoBC,MAApB,QAAkC,OAAlC;AAMA,OAAO,SAASC,MAAT,CAAgB;AAAEC,EAAAA,OAAO,GAAG;AAAZ,CAAhB,EAA+C;AACpD,QAAMC,SAAS,GAAGH,MAAM,CAAoB,IAApB,CAAxB;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACd,QAAII,SAAS,CAACC,OAAd,EAAuB;AACrB,YAAMC,MAAM,GAAGF,SAAS,CAACC,OAAzB;AACA,YAAME,OAAO,GAAGD,MAAM,CAACE,UAAP,CAAkB,IAAlB,CAAhB;AAEA,YAAMC,KAAK,GAAGC,QAAQ,CAACC,IAAT,CAAcC,WAA5B;AACA,YAAMC,MAAM,GAAGH,QAAQ,CAACC,IAAT,CAAcG,YAA7B;AACAR,MAAAA,MAAM,CAACG,KAAP,GAAeA,KAAf;AACAH,MAAAA,MAAM,CAACO,MAAP,GAAgBA,MAAhB;AAEAN,MAAAA,OAAO,CAACQ,SAAR,GAAoB,OAApB;AACAR,MAAAA,OAAO,CAACS,QAAR,CAAiB,CAAjB,EAAoB,CAApB,EAAuBP,KAAvB,EAA8BI,MAA9B;AAEA,YAAMI,OAAO,GAAGC,IAAI,CAACC,KAAL,CAAWV,KAAK,GAAG,EAAnB,IAAyB,CAAzC;AACA,YAAMW,UAAU,GAAGC,KAAK,CAACC,IAAN,CAAW;AAAEC,QAAAA,MAAM,EAAEN;AAAV,OAAX,EAAgCO,IAAhC,CAAqC,CAArC,CAAnB;AAEAjB,MAAAA,OAAO,CAACQ,SAAR,GAAoB,OAApB;AACAR,MAAAA,OAAO,CAACS,QAAR,CAAiB,CAAjB,EAAoB,CAApB,EAAuBP,KAAvB,EAA8BI,MAA9B;;AAEA,YAAMY,YAAY,GAAG,MAAM;AACzBlB,QAAAA,OAAO,CAACQ,SAAR,GAAoB,OAApB;AACAR,QAAAA,OAAO,CAACmB,WAAR,GAAsB,SAAtB;AACAnB,QAAAA,OAAO,CAACoB,MAAR;AACApB,QAAAA,OAAO,CAACS,QAAR,CAAiB,CAAjB,EAAoB,CAApB,EAAuBP,KAAvB,EAA8BI,MAA9B;AAEAN,QAAAA,OAAO,CAACQ,SAAR,GAAoB,MAApB;AACAR,QAAAA,OAAO,CAACqB,IAAR,GAAe,gBAAf;AAEAR,QAAAA,UAAU,CAACS,OAAX,CAAmB,CAACC,CAAD,EAAYC,KAAZ,KAAsB;AACvC,gBAAMC,IAAI,GAAGC,MAAM,CAACC,YAAP,CAAoBhB,IAAI,CAACiB,MAAL,KAAgB,GAApC,CAAb;AACA,gBAAMC,CAAC,GAAGL,KAAK,GAAG,EAAlB;AACAxB,UAAAA,OAAO,CAAC8B,QAAR,CAAiBL,IAAjB,EAAuBI,CAAvB,EAA0BN,CAA1B;;AAEA,cAAIA,CAAC,GAAG,MAAMZ,IAAI,CAACiB,MAAL,KAAgB,KAA9B,EAAqC;AACnCf,YAAAA,UAAU,CAACW,KAAD,CAAV,GAAoB,CAApB;AACD,WAFD,MAEO;AACLX,YAAAA,UAAU,CAACW,KAAD,CAAV,GAAoBD,CAAC,GAAG,EAAxB;AACD;AACF,SAVD;AAWD,OApBD;;AAsBA,YAAMQ,QAAQ,GAAGC,WAAW,CAACd,YAAD,EAAetB,OAAf,CAA5B;AACA,aAAO,MAAM;AACXqC,QAAAA,aAAa,CAACF,QAAD,CAAb;AACD,OAFD;AAGD;AACF,GA9CQ,EA8CN,CAAClC,SAAD,EAAYD,OAAZ,CA9CM,CAAT;AAgDA,sBAAO;AAAQ,IAAA,GAAG,EAAEC;AAAb;AAAA;AAAA;AAAA;AAAA,UAAP;AACD","sourcesContent":["import { useEffect, useRef } from \"react\";\n\ninterface MatrixProps {\n  timeout?: number;\n}\n\nexport function Matrix({ timeout = 50 }: MatrixProps) {\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n\n  useEffect(() => {\n    if (canvasRef.current) {\n      const canvas = canvasRef.current;\n      const context = canvas.getContext(\"2d\");\n\n      const width = document.body.offsetWidth;\n      const height = document.body.offsetHeight;\n      canvas.width = width;\n      canvas.height = height;\n\n      context.fillStyle = \"#8888\";\n      context.fillRect(0, 0, width, height);\n\n      const columns = Math.floor(width / 20) + 1;\n      const yPositions = Array.from({ length: columns }).fill(0);\n\n      context.fillStyle = \"#8888\";\n      context.fillRect(0, 0, width, height);\n\n      const matrixEffect = () => {\n        context.fillStyle = \"#0001\";\n        context.strokeStyle = \"#FF0000\";\n        context.stroke();\n        context.fillRect(0, 0, width, height);\n\n        context.fillStyle = \"#0f0\";\n        context.font = \"15pt monospace\";\n\n        yPositions.forEach((y: number, index) => {\n          const text = String.fromCharCode(Math.random() * 128);\n          const x = index * 20;\n          context.fillText(text, x, y);\n\n          if (y > 100 + Math.random() * 10000) {\n            yPositions[index] = 0;\n          } else {\n            yPositions[index] = y + 20;\n          }\n        });\n      };\n\n      const interval = setInterval(matrixEffect, timeout);\n      return () => {\n        clearInterval(interval);\n      };\n    }\n  }, [canvasRef, timeout]);\n\n  return <canvas ref={canvasRef} />;\n}\n"]},"metadata":{},"sourceType":"module"}