{"ast":null,"code":"import _regeneratorRuntime from \"/home/smoke/\\xC1rea de Trabalho/dashgo/node_modules/next/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/home/smoke/\\xC1rea de Trabalho/dashgo/node_modules/next/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _s = $RefreshSig$();\n\nimport { useQuery } from \"react-query\";\nimport { api } from \"../api\";\n\nfunction getClients(_x) {\n  return _getClients.apply(this, arguments);\n}\n\nfunction _getClients() {\n  _getClients = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(page) {\n    var _yield$api$get, data, headers, totalCount, clients;\n\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return api.get(\"/clients\", {\n              params: {\n                page: page\n              }\n            });\n\n          case 2:\n            _yield$api$get = _context.sent;\n            data = _yield$api$get.data;\n            headers = _yield$api$get.headers;\n            totalCount = Number(headers[\"x-total-count\"]);\n            clients = data.clients.map(function (client) {\n              return {\n                id: client.id,\n                name: client.name,\n                number: client.number,\n                created_at: new Date(client.created_at).toLocaleDateString(\"pt-BR\", {\n                  day: \"2-digit\",\n                  month: \"long\",\n                  year: \"numeric\"\n                })\n              };\n            });\n            return _context.abrupt(\"return\", {\n              clients: clients,\n              totalCount: totalCount\n            });\n\n          case 8:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _getClients.apply(this, arguments);\n}\n\nexport function useClients(page) {\n  _s();\n\n  //return useQuery('clients', () => getclients(page), {\n  return useQuery([\"clients\", page], function () {\n    return getClients(page);\n  }, {\n    staleTime: 1000 * 60 * 10 //10 minutos\n\n  });\n} // Esse 3.o parâmetro staleTime é opcional.\n// Se for informado, define o tempo que o react-query\n// vai buscar novamente os dados. No caso, após 5 seg.\n// Antes de 5 segundos, os dados são considerados \"Fresh\".\n// Após 5 seg, são considerados stale (antigo), e faz refresh.\n\n_s(useClients, \"4ZpngI1uv+Uo3WQHEZmTQ5FNM+k=\", false, function () {\n  return [useQuery];\n});","map":{"version":3,"sources":["/home/smoke/Área de Trabalho/dashgo/src/services/hooks/useUsers.ts"],"names":["useQuery","api","getClients","page","get","params","data","headers","totalCount","Number","clients","map","client","id","name","number","created_at","Date","toLocaleDateString","day","month","year","useClients","staleTime"],"mappings":";;;;;AAAA,SAASA,QAAT,QAAyB,aAAzB;AACA,SAASC,GAAT,QAAoB,QAApB;;SAceC,U;;;;;yEAAf,iBAA0BC,IAA1B;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAGkCF,GAAG,CAACG,GAAJ,CAAQ,UAAR,EAAoB;AAClDC,cAAAA,MAAM,EAAE;AAAEF,gBAAAA,IAAI,EAAJA;AAAF;AAD0C,aAApB,CAHlC;;AAAA;AAAA;AAGUG,YAAAA,IAHV,kBAGUA,IAHV;AAGgBC,YAAAA,OAHhB,kBAGgBA,OAHhB;AAOQC,YAAAA,UAPR,GAOqBC,MAAM,CAACF,OAAO,CAAC,eAAD,CAAR,CAP3B;AASQG,YAAAA,OATR,GASkBJ,IAAI,CAACI,OAAL,CAAaC,GAAb,CAAiB,UAACC,MAAD,EAAoB;AACnD,qBAAO;AACLC,gBAAAA,EAAE,EAAED,MAAM,CAACC,EADN;AAELC,gBAAAA,IAAI,EAAEF,MAAM,CAACE,IAFR;AAGLC,gBAAAA,MAAM,EAAEH,MAAM,CAACG,MAHV;AAILC,gBAAAA,UAAU,EAAE,IAAIC,IAAJ,CAASL,MAAM,CAACI,UAAhB,EAA4BE,kBAA5B,CAA+C,OAA/C,EAAwD;AAClEC,kBAAAA,GAAG,EAAE,SAD6D;AAElEC,kBAAAA,KAAK,EAAE,MAF2D;AAGlEC,kBAAAA,IAAI,EAAE;AAH4D,iBAAxD;AAJP,eAAP;AAUD,aAXe,CATlB;AAAA,6CAsBS;AACLX,cAAAA,OAAO,EAAPA,OADK;AAELF,cAAAA,UAAU,EAAVA;AAFK,aAtBT;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;AA4BA,OAAO,SAASc,UAAT,CAAoBnB,IAApB,EAAkC;AAAA;;AACvC;AACA,SAAOH,QAAQ,CAAC,CAAC,SAAD,EAAYG,IAAZ,CAAD,EAAoB;AAAA,WAAMD,UAAU,CAACC,IAAD,CAAhB;AAAA,GAApB,EAA4C;AACzDoB,IAAAA,SAAS,EAAE,OAAO,EAAP,GAAY,EADkC,CAC9B;;AAD8B,GAA5C,CAAf;AAGD,C,CAED;AACA;AACA;AACA;AACA;;GAXgBD,U;UAEPtB,Q","sourcesContent":["import { useQuery } from \"react-query\";\nimport { api } from \"../api\";\n\ntype Client = {\n  id: string;\n  name: string;\n  number: string;\n  created_at: string;\n};\n\ntype UsersResponse = {\n  totalCount: number;\n  users: Client[];\n};\n\nasync function getClients(page: number): Promise<UsersResponse> {\n  //const response = await fetch('http://localhost:3000/api/users')\n  //const data = await response.json()\n  const { data, headers } = await api.get(\"/clients\", {\n    params: { page },\n  });\n\n  const totalCount = Number(headers[\"x-total-count\"]);\n\n  const clients = data.clients.map((client: Client) => {\n    return {\n      id: client.id,\n      name: client.name,\n      number: client.number,\n      created_at: new Date(client.created_at).toLocaleDateString(\"pt-BR\", {\n        day: \"2-digit\",\n        month: \"long\",\n        year: \"numeric\",\n      }),\n    };\n  });\n\n  return {\n    clients,\n    totalCount,\n  };\n}\n\nexport function useClients(page: number) {\n  //return useQuery('clients', () => getclients(page), {\n  return useQuery([\"clients\", page], () => getClients(page), {\n    staleTime: 1000 * 60 * 10, //10 minutos\n  });\n}\n\n// Esse 3.o parâmetro staleTime é opcional.\n// Se for informado, define o tempo que o react-query\n// vai buscar novamente os dados. No caso, após 5 seg.\n// Antes de 5 segundos, os dados são considerados \"Fresh\".\n// Após 5 seg, são considerados stale (antigo), e faz refresh.\n"]},"metadata":{},"sourceType":"module"}