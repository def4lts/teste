{"ast":null,"code":"import _regeneratorRuntime from \"/home/smoke/\\xC1rea de Trabalho/dashgo/node_modules/next/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/home/smoke/\\xC1rea de Trabalho/dashgo/node_modules/next/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _s = $RefreshSig$();\n\nimport { useQuery } from \"react-query\";\nimport { api } from \"../api\";\n\nfunction getAll() {\n  return _getAll.apply(this, arguments);\n}\n\nfunction _getAll() {\n  _getAll = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n    var responseProducts, totalProducts, responseClients, totalClients, responsePurchases, totalPurchases, clients, purchases;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return api.get(\"/products/1\");\n\n          case 2:\n            responseProducts = _context.sent;\n            totalProducts = Number(responseProducts.data.total);\n            _context.next = 6;\n            return api.get(\"/clients/1\");\n\n          case 6:\n            responseClients = _context.sent;\n            totalClients = Number(responseClients.data.total);\n            _context.next = 10;\n            return api.get(\"/purchases/1\");\n\n          case 10:\n            responsePurchases = _context.sent;\n            totalPurchases = Number(responsePurchases.data.total);\n            clients = responseClients.data.clients.map(function (client) {\n              return {\n                id: client.id,\n                name: client.name,\n                number: client.number,\n                created_at: new Date(client.created_at).toLocaleDateString(\"pt-BR\", {\n                  day: \"2-digit\",\n                  month: \"long\",\n                  year: \"numeric\"\n                })\n              };\n            });\n            purchases = responsePurchases.data.purchases.map(function (purchase) {\n              return {\n                id: purchase.id,\n                product_id: purchase.product_id,\n                price: purchase.price,\n                created_at: new Date(purchase.created_at).toLocaleDateString(\"pt-BR\", {\n                  day: \"2-digit\",\n                  month: \"long\",\n                  year: \"numeric\"\n                })\n              };\n            });\n            return _context.abrupt(\"return\", {\n              totalProducts: totalProducts,\n              totalClients: totalClients,\n              totalPurchases: totalPurchases,\n              clients: clients,\n              purchases: purchases\n            });\n\n          case 15:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _getAll.apply(this, arguments);\n}\n\nexport function useAll() {\n  _s();\n\n  return useQuery(\"all\", function () {\n    return getAll();\n  }, {\n    staleTime: 1000\n  });\n}\n\n_s(useAll, \"4ZpngI1uv+Uo3WQHEZmTQ5FNM+k=\", false, function () {\n  return [useQuery];\n});","map":{"version":3,"sources":["/home/smoke/√Årea de Trabalho/dashgo/src/services/hooks/useAll.ts"],"names":["useQuery","api","getAll","get","responseProducts","totalProducts","Number","data","total","responseClients","totalClients","responsePurchases","totalPurchases","clients","map","client","id","name","number","created_at","Date","toLocaleDateString","day","month","year","purchases","purchase","product_id","price","useAll","staleTime"],"mappings":";;;;;AAAA,SAASA,QAAT,QAAyB,aAAzB;AACA,SAASC,GAAT,QAAoB,QAApB;;SAwBeC,M;;;;;qEAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAC+BD,GAAG,CAACE,GAAJ,eAD/B;;AAAA;AACMC,YAAAA,gBADN;AAEMC,YAAAA,aAFN,GAEsBC,MAAM,CAACF,gBAAgB,CAACG,IAAjB,CAAsBC,KAAvB,CAF5B;AAAA;AAAA,mBAI8BP,GAAG,CAACE,GAAJ,cAJ9B;;AAAA;AAIMM,YAAAA,eAJN;AAKMC,YAAAA,YALN,GAKqBJ,MAAM,CAACG,eAAe,CAACF,IAAhB,CAAqBC,KAAtB,CAL3B;AAAA;AAAA,mBAOgCP,GAAG,CAACE,GAAJ,gBAPhC;;AAAA;AAOMQ,YAAAA,iBAPN;AAQMC,YAAAA,cARN,GAQuBN,MAAM,CAACK,iBAAiB,CAACJ,IAAlB,CAAuBC,KAAxB,CAR7B;AAUQK,YAAAA,OAVR,GAUkBJ,eAAe,CAACF,IAAhB,CAAqBM,OAArB,CAA6BC,GAA7B,CAAiC,UAACC,MAAD,EAAoB;AACnE,qBAAO;AACLC,gBAAAA,EAAE,EAAED,MAAM,CAACC,EADN;AAELC,gBAAAA,IAAI,EAAEF,MAAM,CAACE,IAFR;AAGLC,gBAAAA,MAAM,EAAEH,MAAM,CAACG,MAHV;AAILC,gBAAAA,UAAU,EAAE,IAAIC,IAAJ,CAASL,MAAM,CAACI,UAAhB,EAA4BE,kBAA5B,CAA+C,OAA/C,EAAwD;AAClEC,kBAAAA,GAAG,EAAE,SAD6D;AAElEC,kBAAAA,KAAK,EAAE,MAF2D;AAGlEC,kBAAAA,IAAI,EAAE;AAH4D,iBAAxD;AAJP,eAAP;AAUD,aAXe,CAVlB;AAuBQC,YAAAA,SAvBR,GAuBoBd,iBAAiB,CAACJ,IAAlB,CAAuBkB,SAAvB,CAAiCX,GAAjC,CAChB,UAACY,QAAD,EAAwB;AACtB,qBAAO;AACLV,gBAAAA,EAAE,EAAEU,QAAQ,CAACV,EADR;AAELW,gBAAAA,UAAU,EAAED,QAAQ,CAACC,UAFhB;AAGLC,gBAAAA,KAAK,EAAEF,QAAQ,CAACE,KAHX;AAILT,gBAAAA,UAAU,EAAE,IAAIC,IAAJ,CAASM,QAAQ,CAACP,UAAlB,EAA8BE,kBAA9B,CAAiD,OAAjD,EAA0D;AACpEC,kBAAAA,GAAG,EAAE,SAD+D;AAEpEC,kBAAAA,KAAK,EAAE,MAF6D;AAGpEC,kBAAAA,IAAI,EAAE;AAH8D,iBAA1D;AAJP,eAAP;AAUD,aAZe,CAvBpB;AAAA,6CAsCS;AACLnB,cAAAA,aAAa,EAAbA,aADK;AAELK,cAAAA,YAAY,EAAZA,YAFK;AAGLE,cAAAA,cAAc,EAAdA,cAHK;AAILC,cAAAA,OAAO,EAAPA,OAJK;AAKLY,cAAAA,SAAS,EAATA;AALK,aAtCT;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;AA+CA,OAAO,SAASI,MAAT,GAAkB;AAAA;;AACvB,SAAO7B,QAAQ,CAAC,KAAD,EAAQ;AAAA,WAAME,MAAM,EAAZ;AAAA,GAAR,EAAwB;AACrC4B,IAAAA,SAAS,EAAE;AAD0B,GAAxB,CAAf;AAGD;;GAJeD,M;UACP7B,Q","sourcesContent":["import { useQuery } from \"react-query\";\nimport { api } from \"../api\";\n\ntype Client = {\n  id: string;\n  name: string;\n  number: string;\n  created_at: string;\n};\n\ntype Purchase = {\n  id: string;\n  product_id: string;\n  price: string;\n  created_at: string;\n};\n\ntype AllResponse = {\n  totalProducts: number;\n  totalClients: number;\n  totalPurchases: number;\n  purchases: Purchase[];\n  clients: Client[];\n};\n\nasync function getAll(): Promise<AllResponse> {\n  let responseProducts = await api.get(`/products/1`);\n  let totalProducts = Number(responseProducts.data.total);\n\n  let responseClients = await api.get(`/clients/1`);\n  let totalClients = Number(responseClients.data.total);\n\n  let responsePurchases = await api.get(`/purchases/1`);\n  let totalPurchases = Number(responsePurchases.data.total);\n\n  const clients = responseClients.data.clients.map((client: Client) => {\n    return {\n      id: client.id,\n      name: client.name,\n      number: client.number,\n      created_at: new Date(client.created_at).toLocaleDateString(\"pt-BR\", {\n        day: \"2-digit\",\n        month: \"long\",\n        year: \"numeric\",\n      }),\n    };\n  });\n\n  const purchases = responsePurchases.data.purchases.map(\n    (purchase: Purchase) => {\n      return {\n        id: purchase.id,\n        product_id: purchase.product_id,\n        price: purchase.price,\n        created_at: new Date(purchase.created_at).toLocaleDateString(\"pt-BR\", {\n          day: \"2-digit\",\n          month: \"long\",\n          year: \"numeric\",\n        }),\n      };\n    }\n  );\n\n  return {\n    totalProducts,\n    totalClients,\n    totalPurchases,\n    clients,\n    purchases,\n  };\n}\n\nexport function useAll() {\n  return useQuery(\"all\", () => getAll(), {\n    staleTime: 1000,\n  });\n}\n"]},"metadata":{},"sourceType":"module"}