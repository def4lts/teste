{"ast":null,"code":"import { jsx as _jsx } from \"react/jsx-runtime\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport Link from \"next/link\";\nimport { useRouter } from \"next/router\";\nimport { useMemo } from \"react\";\nimport { cloneElement } from 'react';\n// ReactElement é diferente do ReactNode:\n// ReactNode: aceita Tags, Texto, número e outros componentes dentro\n// ReactElement: só aceita outros componentes dentro.\n// cloneElement: permite clonar o primeiro elemento (no caso, o children),\n// que vem dentro do componente (no caso, Link) e modificar alguma \n// propriedade dele (no caso, a cor).\nexport function ActiveLink(_ref) {\n  let {\n    children,\n    exactHref = false\n  } = _ref,\n      rest = _objectWithoutProperties(_ref, [\"children\", \"exactHref\"]);\n\n  const {\n    asPath\n  } = useRouter();\n  const isActive = useMemo(() => {\n    if (exactHref) {\n      return asPath === rest.href || asPath === rest.as;\n    } else {\n      return asPath.startsWith(String(rest.href)) || asPath.startsWith(String(rest.as));\n    }\n  }, [asPath]);\n  /* \n      let isActive = false\n      if (asPath === rest.href || asPath === rest.as ||\n          asPath.startsWith(String(rest.href)) ||\n          asPath.startsWith(String(rest.as))) {\n          isActive = true\n      }\n  */\n\n  return /*#__PURE__*/_jsx(Link, _objectSpread(_objectSpread({}, rest), {}, {\n    children: /*#__PURE__*/cloneElement(children, {\n      color: isActive ? 'messenger.400' : 'gray.50'\n    })\n  }));\n}","map":null,"metadata":{},"sourceType":"module"}