{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/smoke/\\xC1rea de Trabalho/dashgo/src/pages/cards/create.tsx\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { Box, Flex, Heading, Divider, Textarea, Menu, MenuButton, MenuList, MenuItem } from \"@chakra-ui/react\";\nimport { HStack, Button } from \"@chakra-ui/react\";\nimport { useForm } from \"react-hook-form\";\nimport * as yup from \"yup\";\nimport { yupResolver } from \"@hookform/resolvers/yup\";\nimport { Header } from \"../../components/Header\";\nimport { Sidebar } from \"../../components/Sidebar\";\nimport { api } from \"../../services/api\";\nimport { ChevronDownIcon } from \"@chakra-ui/icons\";\nimport { useCategories } from \"../../services/hooks/useCategories\";\nlet categoryId;\n\nclass Cartao {\n  constructor(number, month, year, cvv, category_id) {\n    _defineProperty(this, \"number\", void 0);\n\n    _defineProperty(this, \"month\", void 0);\n\n    _defineProperty(this, \"year\", void 0);\n\n    _defineProperty(this, \"cvv\", void 0);\n\n    _defineProperty(this, \"category_id\", void 0);\n\n    if (number === undefined || number.length <= 0 || month === undefined || month.length <= 0 || year === undefined || year.length <= 0 || cvv === undefined || cvv.length <= 0) {}\n\n    this.number = number;\n    this.month = month;\n    this.year = year;\n    this.cvv = cvv;\n    this.category_id = categoryId;\n  }\n\n}\n\nconst createUserSchema = yup.object().shape({\n  cards: yup.string().required(\"Cartões obrigatórios\")\n});\n\nfunction filter_array(CardList) {\n  let index = -1;\n  const arr_length = CardList ? CardList.length : 0;\n  let resIndex = -1;\n  const result = [];\n\n  while (++index < arr_length) {\n    const value = CardList[index];\n\n    if (value) {\n      result[++resIndex] = value;\n    }\n  }\n\n  return result;\n}\n\nasync function start(cardArray) {\n  cardArray.forEach(async (dado, index) => {\n    setTimeout(async function () {\n      let number = String(dado).split(\"|\")[0];\n      let month = String(dado).split(\"|\")[1];\n      let year = String(dado).split(\"|\")[2];\n      let cvv = String(dado).split(\"|\")[3];\n      const response = await api.post(\"/products\", {\n        number: number,\n        month: month,\n        year: year,\n        cvv: cvv,\n        category_id: categoryId\n      });\n      const responseIds = await api.get(\"/products/1\");\n      const inserir = responseIds.data.productsIds;\n      inserir.push(String(response.data.id));\n      console.log(inserir);\n      const relation = await api.post(\"/users/products\", {\n        products_id: inserir\n      });\n      console.log(relation.data);\n    }, 1000 * (index + 1));\n  });\n}\n\nexport default function CreateUser() {\n  const {\n    data,\n    isLoading,\n    isFetching,\n    error\n  } = useCategories();\n  const {\n    register,\n    handleSubmit,\n    formState\n  } = useForm({\n    resolver: yupResolver(createUserSchema)\n  });\n  const errors = formState.errors; //const handleCreateUser: SubmitHandler<CreateUserFormData) = (values) => {\n\n  async function handleCreateCard(values) {\n    const cardList = values.cards.replace(\"\\r\", \"\").split(\"\\n\");\n    const cardArray = filter_array(cardList);\n    start(cardArray); //router.push(\"/users\"); //volta para a listagem de usuários\n  }\n\n  return /*#__PURE__*/_jsxDEV(Box, {\n    children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Flex, {\n      w: \"100%\",\n      my: \"6\",\n      maxWidth: 1480,\n      mx: \"auto\",\n      px: \"6\",\n      children: [/*#__PURE__*/_jsxDEV(Sidebar, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Box, {\n        as: \"form\",\n        flex: \"1\",\n        borderRadius: 8,\n        bg: \"gray.800\",\n        p: [\"4\", \"8\"],\n        onSubmit: handleSubmit(handleCreateCard),\n        children: [/*#__PURE__*/_jsxDEV(Flex, {\n          mb: \"8\",\n          justifyContent: \"space-between\",\n          align: \"center\",\n          children: [/*#__PURE__*/_jsxDEV(Heading, {\n            size: \"lg\",\n            fontWeight: \"normal\",\n            children: \"Upload Cart\\xF5es\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 145,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Menu, {\n            children: ({\n              isOpen\n            }) => /*#__PURE__*/_jsxDEV(_Fragment, {\n              children: [/*#__PURE__*/_jsxDEV(MenuButton, {\n                isActive: isOpen,\n                as: Button,\n                colorScheme: \"messenger\",\n                rightIcon: /*#__PURE__*/_jsxDEV(ChevronDownIcon, {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 155,\n                  columnNumber: 32\n                }, this),\n                children: isOpen ? \"Fechar\" : \"Categoria\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 151,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(MenuList, {\n                children: data === null || data === void 0 ? void 0 : data.categories.map(category => /*#__PURE__*/_jsxDEV(MenuItem, {\n                  color: \"black\",\n                  onClick: () => categoryId = category.id,\n                  children: category.name\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 161,\n                  columnNumber: 23\n                }, this))\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 159,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 148,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 144,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Divider, {\n          my: \"6\",\n          borderColor: \"gray.700\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 173,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Textarea, _objectSpread({\n          placeholder: \"4552250055368113|08|2023|113\",\n          h: \"400px\"\n        }, register(\"cards\")), void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 174,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Flex, {\n          mt: \"8\",\n          justify: \"flex-end\",\n          children: /*#__PURE__*/_jsxDEV(HStack, {\n            spacing: \"4\",\n            children: [/*#__PURE__*/_jsxDEV(Button, {\n              as: \"a\",\n              colorScheme: \"whiteAlpha\",\n              href: \"/users\",\n              children: \"Cancelar\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 181,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Button, {\n              type: \"submit\",\n              isLoading: formState.isSubmitting,\n              colorScheme: \"messenger\",\n              children: \"Salvar\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 184,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 180,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 179,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 130,\n    columnNumber: 5\n  }, this);\n}","map":{"version":3,"sources":["/home/smoke/Área de Trabalho/dashgo/src/pages/cards/create.tsx"],"names":["Box","Flex","Heading","Divider","Textarea","Menu","MenuButton","MenuList","MenuItem","HStack","Button","useForm","yup","yupResolver","Header","Sidebar","api","ChevronDownIcon","useCategories","categoryId","Cartao","constructor","number","month","year","cvv","category_id","undefined","length","createUserSchema","object","shape","cards","string","required","filter_array","CardList","index","arr_length","resIndex","result","value","start","cardArray","forEach","dado","setTimeout","String","split","response","post","responseIds","get","inserir","data","productsIds","push","id","console","log","relation","products_id","CreateUser","isLoading","isFetching","error","register","handleSubmit","formState","resolver","errors","handleCreateCard","values","cardList","replace","isOpen","categories","map","category","name","isSubmitting"],"mappings":"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","sourcesContent":["import {\n  Box,\n  Flex,\n  Heading,\n  Divider,\n  Textarea,\n  Menu,\n  MenuButton,\n  MenuList,\n  MenuItem,\n} from \"@chakra-ui/react\";\nimport { HStack, Button } from \"@chakra-ui/react\";\nimport { useForm } from \"react-hook-form\";\nimport * as yup from \"yup\";\nimport { yupResolver } from \"@hookform/resolvers/yup\";\n\nimport { Header } from \"../../components/Header\";\nimport { Sidebar } from \"../../components/Sidebar\";\nimport { api } from \"../../services/api\";\nimport { ChevronDownIcon } from \"@chakra-ui/icons\";\nimport { useCategories } from \"../../services/hooks/useCategories\";\n\nlet categoryId: string;\n\ntype CreateUserFormData = {\n  cards: string;\n};\n\nclass Cartao {\n  number: string;\n  month: string;\n  year: string;\n  cvv: string;\n  category_id: string;\n  constructor(\n    number: string,\n    month: string,\n    year: string,\n    cvv: string,\n    category_id: string\n  ) {\n    if (\n      number === undefined ||\n      number.length <= 0 ||\n      month === undefined ||\n      month.length <= 0 ||\n      year === undefined ||\n      year.length <= 0 ||\n      cvv === undefined ||\n      cvv.length <= 0\n    ) {\n    }\n    this.number = number;\n    this.month = month;\n    this.year = year;\n    this.cvv = cvv;\n    this.category_id = categoryId;\n  }\n}\n\nconst createUserSchema = yup.object().shape({\n  cards: yup.string().required(\"Cartões obrigatórios\"),\n});\n\nfunction filter_array(CardList) {\n  let index = -1;\n  const arr_length = CardList ? CardList.length : 0;\n  let resIndex = -1;\n  const result = [];\n  while (++index < arr_length) {\n    const value = CardList[index];\n\n    if (value) {\n      result[++resIndex] = value;\n    }\n  }\n  return result;\n}\n\nasync function start(cardArray) {\n  cardArray.forEach(async (dado, index) => {\n    setTimeout(async function () {\n      let number = String(dado).split(\"|\")[0];\n      let month = String(dado).split(\"|\")[1];\n      let year = String(dado).split(\"|\")[2];\n      let cvv = String(dado).split(\"|\")[3];\n\n      const response = await api.post(\"/products\", {\n        number: number,\n        month: month,\n        year: year,\n        cvv: cvv,\n        category_id: categoryId,\n      });\n\n      const responseIds = await api.get(\"/products/1\");\n\n      const inserir = responseIds.data.productsIds;\n\n      inserir.push(String(response.data.id));\n\n      console.log(inserir);\n      const relation = await api.post(\"/users/products\", {\n        products_id: inserir,\n      });\n\n      console.log(relation.data);\n    }, 1000 * (index + 1));\n  });\n}\n\nexport default function CreateUser() {\n  const { data, isLoading, isFetching, error } = useCategories();\n\n  const { register, handleSubmit, formState } = useForm({\n    resolver: yupResolver(createUserSchema),\n  });\n\n  const errors = formState.errors;\n\n  //const handleCreateUser: SubmitHandler<CreateUserFormData) = (values) => {\n  async function handleCreateCard(values: CreateUserFormData) {\n    const cardList = values.cards.replace(\"\\r\", \"\").split(\"\\n\");\n    const cardArray = filter_array(cardList);\n    start(cardArray);\n    //router.push(\"/users\"); //volta para a listagem de usuários\n  }\n\n  return (\n    <Box>\n      <Header />\n\n      <Flex w=\"100%\" my=\"6\" maxWidth={1480} mx=\"auto\" px=\"6\">\n        <Sidebar />\n\n        <Box\n          as=\"form\"\n          flex=\"1\"\n          borderRadius={8}\n          bg=\"gray.800\"\n          p={[\"4\", \"8\"]}\n          onSubmit={handleSubmit(handleCreateCard)}\n        >\n          <Flex mb=\"8\" justifyContent=\"space-between\" align=\"center\">\n            <Heading size=\"lg\" fontWeight=\"normal\">\n              Upload Cartões\n            </Heading>\n            <Menu>\n              {({ isOpen }) => (\n                <>\n                  <MenuButton\n                    isActive={isOpen}\n                    as={Button}\n                    colorScheme=\"messenger\"\n                    rightIcon={<ChevronDownIcon />}\n                  >\n                    {isOpen ? \"Fechar\" : \"Categoria\"}\n                  </MenuButton>\n                  <MenuList>\n                    {data?.categories.map((category) => (\n                      <MenuItem\n                        color=\"black\"\n                        onClick={() => (categoryId = category.id)}\n                      >\n                        {category.name}\n                      </MenuItem>\n                    ))}\n                  </MenuList>\n                </>\n              )}\n            </Menu>\n          </Flex>\n          <Divider my=\"6\" borderColor=\"gray.700\" />\n          <Textarea\n            placeholder=\"4552250055368113|08|2023|113\"\n            h=\"400px\"\n            {...register(\"cards\")}\n          ></Textarea>\n          <Flex mt=\"8\" justify=\"flex-end\">\n            <HStack spacing=\"4\">\n              <Button as=\"a\" colorScheme=\"whiteAlpha\" href=\"/users\">\n                Cancelar\n              </Button>\n              <Button\n                type=\"submit\"\n                isLoading={formState.isSubmitting}\n                colorScheme=\"messenger\"\n              >\n                Salvar\n              </Button>\n            </HStack>\n          </Flex>\n        </Box>\n      </Flex>\n    </Box>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}