{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/smoke/\\xC1rea de Trabalho/dashgo/src/components/Pagination/index.tsx\";\nimport { Stack, HStack, Text, Box } from '@chakra-ui/react';\nimport { useMemo } from 'react';\nimport { Page } from './Page';\nconst siblingsCount = 1; // 1 página anterior + 1 página posterior\n\nfunction generatePagesArray(from, to) {\n  const qtItens = to - from;\n  let array = [];\n\n  if (to > from) {\n    for (let i = 0; i < qtItens; i++) {\n      array.push(from + i + 1);\n    }\n  }\n\n  return array;\n}\n\nexport function Pagination({\n  totalCountOfRegisters,\n  registersPerPage = 10,\n  currentPage = 1,\n  onPageChange\n}) {\n  const lastPage = useMemo(() => Math.ceil(totalCountOfRegisters / registersPerPage), [totalCountOfRegisters, registersPerPage]);\n  const previousPages = useMemo(() => currentPage > 1 ? generatePagesArray(currentPage - 1 - siblingsCount, currentPage - 1) : [], [currentPage]);\n  const nextPages = useMemo(() => currentPage < lastPage ? generatePagesArray(currentPage, Math.min(currentPage + siblingsCount, lastPage)) : [], [currentPage]);\n  return /*#__PURE__*/_jsxDEV(Stack, {\n    direction: [\"column\", \"row\"],\n    mt: \"8\",\n    justify: \"space-between\",\n    align: \"center\",\n    spacing: \"6\",\n    children: [/*#__PURE__*/_jsxDEV(Box, {\n      children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n        children: \"0\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 13\n      }, this), \" - \", /*#__PURE__*/_jsxDEV(\"strong\", {\n        children: \"10\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 34\n      }, this), \" de \", /*#__PURE__*/_jsxDEV(\"strong\", {\n        children: \"100\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 57\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 10\n    }, this), /*#__PURE__*/_jsxDEV(HStack, {\n      spacing: \"2\",\n      children: [currentPage > 1 + siblingsCount && /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(Page, {\n          onPageChange: onPageChange,\n          number: 1\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 19\n        }, this), currentPage > 2 + siblingsCount && /*#__PURE__*/_jsxDEV(Text, {\n          color: \"gray.300\",\n          width: \"8\",\n          textAlign: \"center\",\n          children: \"...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 22\n        }, this)]\n      }, void 0, true), previousPages.length > 0 && previousPages.map(page => /*#__PURE__*/_jsxDEV(Page, {\n        onPageChange: onPageChange,\n        number: page\n      }, page, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 16\n      }, this)), /*#__PURE__*/_jsxDEV(Page, {\n        onPageChange: onPageChange,\n        number: currentPage,\n        isCurrent: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 13\n      }, this), nextPages.length > 0 && nextPages.map(page => /*#__PURE__*/_jsxDEV(Page, {\n        onPageChange: onPageChange,\n        number: page\n      }, page, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 16\n      }, this)), currentPage + siblingsCount < lastPage && /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [currentPage + 1 + siblingsCount < lastPage && /*#__PURE__*/_jsxDEV(Text, {\n          color: \"gray.300\",\n          width: \"8\",\n          textAlign: \"center\",\n          children: \"...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 22\n        }, this), /*#__PURE__*/_jsxDEV(Page, {\n          onPageChange: onPageChange,\n          number: lastPage\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 19\n        }, this)]\n      }, void 0, true)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 10\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 7\n  }, this);\n}","map":{"version":3,"sources":["/home/smoke/Área de Trabalho/dashgo/src/components/Pagination/index.tsx"],"names":["Stack","HStack","Text","Box","useMemo","Page","siblingsCount","generatePagesArray","from","to","qtItens","array","i","push","Pagination","totalCountOfRegisters","registersPerPage","currentPage","onPageChange","lastPage","Math","ceil","previousPages","nextPages","min","length","map","page"],"mappings":"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","sourcesContent":["import { Stack, HStack, Text, Box } from '@chakra-ui/react'\nimport { useMemo } from 'react'\nimport { Page } from './Page'\n\ninterface PaginationProps {\n   totalCountOfRegisters: number\n   registersPerPage?: number\n   currentPage?: number\n   onPageChange: (page: number) => void\n}\n\nconst siblingsCount = 1  // 1 página anterior + 1 página posterior\n\nfunction generatePagesArray(from: number, to: number) {\n   const qtItens = (to - from)\n   \n   let array = []\n   if (to > from) {\n      for (let i = 0; i < qtItens; i++) {\n         array.push(from + i + 1)\n      }\n   }\n   return array\n}\n\nexport function Pagination({ \n   totalCountOfRegisters,\n   registersPerPage = 10,\n   currentPage = 1,\n   onPageChange\n }: PaginationProps) {\n\n   const lastPage = useMemo(() => (\n      Math.ceil(totalCountOfRegisters / registersPerPage)\n   ), [totalCountOfRegisters, registersPerPage]) \n\n   const previousPages = useMemo(() => (\n      currentPage > 1\n      ? generatePagesArray(currentPage - 1 - siblingsCount, currentPage -1)\n      : []\n   ), [currentPage])\n\n   const nextPages = useMemo(() => (\n      currentPage < lastPage\n      ?  generatePagesArray(currentPage, Math.min(currentPage + siblingsCount, lastPage))\n      : []\n   ), [currentPage])      \n\n   return (\n      <Stack\n         direction={[\"column\", \"row\"]}\n         mt=\"8\"\n         justify=\"space-between\"\n         align=\"center\"\n         spacing=\"6\"         \n      >\n         <Box>\n            <strong>0</strong> - <strong>10</strong> de <strong>100</strong>\n         </Box>\n\n         <HStack spacing=\"2\">\n\n            { currentPage > (1 + siblingsCount) && (\n               <>\n                  <Page onPageChange={onPageChange} number={1} />\n                  { currentPage > (2 + siblingsCount) && (\n                     <Text color=\"gray.300\" width=\"8\" textAlign=\"center\">...</Text>\n                  )}\n               </>\n            )}\n\n            { previousPages.length > 0 && previousPages.map(page => (\n               <Page onPageChange={onPageChange} number={page} key={page} />\n            ))}\n\n            <Page onPageChange={onPageChange} number={currentPage} isCurrent />\n     \n            { nextPages.length > 0 && nextPages.map(page => (\n               <Page onPageChange={onPageChange} number={page} key={page} />\n            ))}\n\n            { currentPage + siblingsCount < lastPage && (\n               <>\n                  { (currentPage + 1 + siblingsCount) < lastPage && (\n                     <Text color=\"gray.300\" width=\"8\" textAlign=\"center\">...</Text>\n                  )}\n                  <Page onPageChange={onPageChange} number={lastPage} />\n               </>\n            )}\n\n         </HStack>\n      </Stack>\n   )\n} "]},"metadata":{},"sourceType":"module"}