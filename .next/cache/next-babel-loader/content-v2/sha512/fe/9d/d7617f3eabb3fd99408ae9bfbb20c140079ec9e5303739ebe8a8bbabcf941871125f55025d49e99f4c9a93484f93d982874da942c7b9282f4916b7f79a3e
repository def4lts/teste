{"ast":null,"code":"import _defineProperty from \"/home/smoke/\\xC1rea de Trabalho/dashgo/node_modules/next/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport _objectWithoutProperties from \"/home/smoke/\\xC1rea de Trabalho/dashgo/node_modules/next/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\n\nvar _jsxFileName = \"/home/smoke/\\xC1rea de Trabalho/dashgo/src/components/Form/Input.tsx\",\n    _this = this;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { forwardRef } from \"react\";\nimport { Input as ChakraInput, FormLabel, FormControl } from \"@chakra-ui/react\";\nimport { FormErrorMessage } from \"@chakra-ui/react\";\n\nvar InputBase = function InputBase(_ref, ref) {\n  var label = _ref.label,\n      name = _ref.name,\n      _ref$error = _ref.error,\n      error = _ref$error === void 0 ? null : _ref$error,\n      rest = _objectWithoutProperties(_ref, [\"label\", \"name\", \"error\"]);\n\n  return /*#__PURE__*/_jsxDEV(FormControl, {\n    isInvalid: !!error,\n    children: [!label || /*#__PURE__*/_jsxDEV(FormLabel, {\n      htmlFor: name,\n      children: label\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 18\n    }, _this), /*#__PURE__*/_jsxDEV(ChakraInput, _objectSpread({\n      name: name,\n      id: name,\n      borderColor: \"green.50\",\n      borderRadius: \"50\",\n      focusBorderColor: \"messenger.400\",\n      size: \"lg\",\n      _hover: {\n        bgColor: \"brand.50\"\n      },\n      ref: ref\n    }, rest), void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 7\n    }, _this), !!error && /*#__PURE__*/_jsxDEV(FormErrorMessage, {\n      children: error.message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 19\n    }, _this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 24,\n    columnNumber: 5\n  }, _this);\n};\n\n_c = InputBase;\nexport var Input = /*#__PURE__*/forwardRef(InputBase);\n_c2 = Input;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"InputBase\");\n$RefreshReg$(_c2, \"Input\");","map":{"version":3,"sources":["/home/smoke/Área de Trabalho/dashgo/src/components/Form/Input.tsx"],"names":["forwardRef","Input","ChakraInput","FormLabel","FormControl","FormErrorMessage","InputBase","ref","label","name","error","rest","bgColor","message"],"mappings":";;;;;;;;;;;AAAA,SAASA,UAAT,QAAqD,OAArD;AAEA,SACEC,KAAK,IAAIC,WADX,EAGEC,SAHF,EAIEC,WAJF,QAKO,kBALP;AAMA,SAASC,gBAAT,QAAiC,kBAAjC;;AAUA,IAAMC,SAAiE,GAAG,SAApEA,SAAoE,OAExEC,GAFwE,EAGrE;AAAA,MAFDC,KAEC,QAFDA,KAEC;AAAA,MAFMC,IAEN,QAFMA,IAEN;AAAA,wBAFYC,KAEZ;AAAA,MAFYA,KAEZ,2BAFoB,IAEpB;AAAA,MAF6BC,IAE7B;;AACH,sBACE,QAAC,WAAD;AAAa,IAAA,SAAS,EAAE,CAAC,CAACD,KAA1B;AAAA,eACG,CAACF,KAAD,iBAAU,QAAC,SAAD;AAAW,MAAA,OAAO,EAAEC,IAApB;AAAA,gBAA2BD;AAA3B;AAAA;AAAA;AAAA;AAAA,aADb,eAEE,QAAC,WAAD;AACE,MAAA,IAAI,EAAEC,IADR;AAEE,MAAA,EAAE,EAAEA,IAFN;AAGE,MAAA,WAAW,EAAC,UAHd;AAIE,MAAA,YAAY,EAAC,IAJf;AAKE,MAAA,gBAAgB,EAAC,eALnB;AAME,MAAA,IAAI,EAAC,IANP;AAOE,MAAA,MAAM,EAAE;AACNG,QAAAA,OAAO,EAAE;AADH,OAPV;AAUE,MAAA,GAAG,EAAEL;AAVP,OAWMI,IAXN;AAAA;AAAA;AAAA;AAAA,aAFF,EAgBG,CAAC,CAACD,KAAF,iBAAW,QAAC,gBAAD;AAAA,gBAAmBA,KAAK,CAACG;AAAzB;AAAA;AAAA;AAAA;AAAA,aAhBd;AAAA;AAAA;AAAA;AAAA;AAAA,WADF;AAoBD,CAxBD;;KAAMP,S;AA0BN,OAAO,IAAML,KAAK,gBAAGD,UAAU,CAACM,SAAD,CAAxB;MAAML,K","sourcesContent":["import { forwardRef, ForwardRefRenderFunction } from \"react\";\nimport { FieldError } from \"react-hook-form\";\nimport {\n  Input as ChakraInput,\n  InputProps as ChakraInputProps,\n  FormLabel,\n  FormControl,\n} from \"@chakra-ui/react\";\nimport { FormErrorMessage } from \"@chakra-ui/react\";\n\ninterface InputProps extends ChakraInputProps {\n  name: string;\n  label?: string;\n  type?: string;\n  placeHolder?: string;\n  error?: FieldError;\n}\n\nconst InputBase: ForwardRefRenderFunction<HTMLInputElement, InputProps> = (\n  { label, name, error = null, ...rest },\n  ref\n) => {\n  return (\n    <FormControl isInvalid={!!error}>\n      {!label || <FormLabel htmlFor={name}>{label}</FormLabel>}\n      <ChakraInput\n        name={name}\n        id={name}\n        borderColor=\"green.50\"\n        borderRadius=\"50\"\n        focusBorderColor=\"messenger.400\"\n        size=\"lg\"\n        _hover={{\n          bgColor: \"brand.50\",\n        }}\n        ref={ref}\n        {...rest}\n      />\n\n      {!!error && <FormErrorMessage>{error.message}</FormErrorMessage>}\n    </FormControl>\n  );\n};\n\nexport const Input = forwardRef(InputBase);\n"]},"metadata":{},"sourceType":"module"}