{"ast":null,"code":"import { createServer, Factory, Model, Response, ActiveModelSerializer } from 'miragejs';\nimport faker from 'faker';\nexport function myServer() {\n  var server = createServer({\n    // Tabelas do banco\n    models: {\n      user: Model.extend({})\n    },\n    // Permite gravar/obter dados de 2 tabelas de 1 vez\n    serializers: {\n      application: ActiveModelSerializer\n    },\n    // Geração de dados aleatórios\n    factories: {\n      user: Factory.extend({\n        name: function name(i) {\n          return faker.name.firstName() + ' ' + faker.name.lastName(); //return `Usuário ${i + 1}`\n        },\n        email: function email() {\n          return faker.internet.email();\n        },\n        created_at: function created_at() {\n          return faker.date.recent(90); //últimos 90 dias\n        }\n      })\n    },\n    // Inclusão de dados em massa (200 usuários)\n    seeds: function seeds(server) {\n      server.createList('user', 200);\n    },\n    routes: function routes() {\n      this.namespace = 'api';\n      this.timing = 750; // delay na chamada da API, p/ testar\n\n      this.post('/users'); // rota POST api/users              \n      //this.get('/users')  // rota GET api/users\n      // GET com paginação de 10 em 10\n\n      this.get('/users', function (schema, request) {\n        var _request$queryParams = request.queryParams,\n            _request$queryParams$ = _request$queryParams.page,\n            page = _request$queryParams$ === void 0 ? 1 : _request$queryParams$,\n            _request$queryParams$2 = _request$queryParams.per_page,\n            per_page = _request$queryParams$2 === void 0 ? 10 : _request$queryParams$2;\n        var totalUsers = schema.all('user').length; //retorna 200\n\n        var pageStart = (Number(page) - 1) * Number(per_page);\n        var pageEnd = pageStart + Number(per_page);\n        var users = this.serialize(schema.all('user')).users //.sort((a, b) => b.name < a.name) não funciona\n        .slice(pageStart, pageEnd);\n        return new Response(200, // status code\n        {\n          'x-total-count': String(totalUsers)\n        }, //header\n        {\n          users: users\n        });\n      });\n      this.get('/users/:id');\n      this.namespace = ''; // se o namespace não for 'api', não precisa disso.\n\n      this.passthrough();\n    }\n  });\n}","map":{"version":3,"sources":["/home/smoke/Área de Trabalho/dashgo/src/services/mirage/index.ts"],"names":["createServer","Factory","Model","Response","ActiveModelSerializer","faker","myServer","server","models","user","extend","serializers","application","factories","name","i","firstName","lastName","email","internet","created_at","date","recent","seeds","createList","routes","namespace","timing","post","get","schema","request","queryParams","page","per_page","totalUsers","all","length","pageStart","Number","pageEnd","users","serialize","slice","String","passthrough"],"mappings":"AAAA,SAASA,YAAT,EAAuBC,OAAvB,EAAgCC,KAAhC,EAAuCC,QAAvC,EAAiDC,qBAAjD,QAA8E,UAA9E;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAQA,OAAO,SAASC,QAAT,GAAoB;AACvB,MAAMC,MAAM,GAAGP,YAAY,CAAC;AAExB;AACAQ,IAAAA,MAAM,EAAE;AACJC,MAAAA,IAAI,EAAEP,KAAK,CAACQ,MAAN,CAA4B,EAA5B;AADF,KAHgB;AAOxB;AACAC,IAAAA,WAAW,EAAE;AACTC,MAAAA,WAAW,EAAER;AADJ,KARW;AAYxB;AACAS,IAAAA,SAAS,EAAE;AACPJ,MAAAA,IAAI,EAAER,OAAO,CAACS,MAAR,CAAe;AACjBI,QAAAA,IADiB,gBACZC,CADY,EACD;AACZ,iBAAOV,KAAK,CAACS,IAAN,CAAWE,SAAX,KAAwB,GAAxB,GAA6BX,KAAK,CAACS,IAAN,CAAWG,QAAX,EAApC,CADY,CAEZ;AACH,SAJgB;AAKjBC,QAAAA,KALiB,mBAKT;AACJ,iBAAOb,KAAK,CAACc,QAAN,CAAeD,KAAf,EAAP;AACH,SAPgB;AAQjBE,QAAAA,UARiB,wBAQJ;AACT,iBAAOf,KAAK,CAACgB,IAAN,CAAWC,MAAX,CAAkB,EAAlB,CAAP,CADS,CACoB;AAChC;AAVgB,OAAf;AADC,KAba;AA4BxB;AACAC,IAAAA,KA7BwB,iBA6BlBhB,MA7BkB,EA6BV;AACVA,MAAAA,MAAM,CAACiB,UAAP,CAAkB,MAAlB,EAA0B,GAA1B;AACH,KA/BuB;AAiCxBC,IAAAA,MAjCwB,oBAiCf;AACL,WAAKC,SAAL,GAAiB,KAAjB;AACA,WAAKC,MAAL,GAAc,GAAd,CAFK,CAEiB;;AAEtB,WAAKC,IAAL,CAAU,QAAV,EAJK,CAIiB;AACtB;AAEA;;AACA,WAAKC,GAAL,CAAS,QAAT,EAAmB,UAAUC,MAAV,EAAkBC,OAAlB,EAA2B;AAAA,mCACPA,OAAO,CAACC,WADD;AAAA,yDAClCC,IADkC;AAAA,YAClCA,IADkC,sCAC3B,CAD2B;AAAA,0DACxBC,QADwB;AAAA,YACxBA,QADwB,uCACb,EADa;AAE1C,YAAMC,UAAU,GAAGL,MAAM,CAACM,GAAP,CAAW,MAAX,EAAmBC,MAAtC,CAF0C,CAEG;;AAC7C,YAAMC,SAAS,GAAG,CAACC,MAAM,CAACN,IAAD,CAAN,GAAe,CAAhB,IAAqBM,MAAM,CAACL,QAAD,CAA7C;AACA,YAAMM,OAAO,GAAGF,SAAS,GAAGC,MAAM,CAACL,QAAD,CAAlC;AAEA,YAAMO,KAAK,GAAG,KAAKC,SAAL,CAAeZ,MAAM,CAACM,GAAP,CAAW,MAAX,CAAf,EACTK,KADS,CAEV;AAFU,SAGTE,KAHS,CAGHL,SAHG,EAGQE,OAHR,CAAd;AAKA,eAAO,IAAIrC,QAAJ,CACH,GADG,EACE;AACL;AAAE,2BAAiByC,MAAM,CAACT,UAAD;AAAzB,SAFG,EAEsC;AACzC;AAAEM,UAAAA,KAAK,EAALA;AAAF,SAHG,CAAP;AAKH,OAhBD;AAkBA,WAAKZ,GAAL,CAAS,YAAT;AAEA,WAAKH,SAAL,GAAiB,EAAjB,CA5BK,CA4BiB;;AACtB,WAAKmB,WAAL;AACH;AA/DuB,GAAD,CAA3B;AAkEH","sourcesContent":["import { createServer, Factory, Model, Response, ActiveModelSerializer } from 'miragejs'\nimport faker from 'faker'\n\ntype User = {\n    name: string\n    email: string\n    created_at: string\n}\n\nexport function myServer() {\n    const server = createServer({\n\n        // Tabelas do banco\n        models: {\n            user: Model.extend<Partial<User>>({})\n        },\n\n        // Permite gravar/obter dados de 2 tabelas de 1 vez\n        serializers: {  \n            application: ActiveModelSerializer\n        },\n\n        // Geração de dados aleatórios\n        factories: {  \n            user: Factory.extend({\n                name(i: number) {\n                    return faker.name.firstName() +' '+ faker.name.lastName()\n                    //return `Usuário ${i + 1}`\n                },\n                email() {\n                    return faker.internet.email()\n                },\n                created_at() {\n                    return faker.date.recent(90) //últimos 90 dias\n                }\n            })\n        },\n\n        // Inclusão de dados em massa (200 usuários)\n        seeds(server) {  \n            server.createList('user', 200)\n        },\n\n        routes() {\n            this.namespace = 'api' \n            this.timing = 750     // delay na chamada da API, p/ testar\n            \n            this.post('/users')   // rota POST api/users              \n            //this.get('/users')  // rota GET api/users\n\n            // GET com paginação de 10 em 10\n            this.get('/users', function (schema, request) {\n                const { page = 1, per_page = 10} = request.queryParams\n                const totalUsers = schema.all('user').length //retorna 200\n                const pageStart = (Number(page) - 1) * Number(per_page)\n                const pageEnd = pageStart + Number(per_page)\n                \n                const users = this.serialize(schema.all('user'))\n                    .users\n                    //.sort((a, b) => b.name < a.name) não funciona\n                    .slice(pageStart, pageEnd)\n\n                return new Response(\n                    200, // status code\n                    { 'x-total-count': String(totalUsers) }, //header\n                    { users }\n                )\n            })\n            \n            this.get('/users/:id')\n            \n            this.namespace = ''   // se o namespace não for 'api', não precisa disso.\n            this.passthrough()    \n        }\n\n    })\n}\n"]},"metadata":{},"sourceType":"module"}