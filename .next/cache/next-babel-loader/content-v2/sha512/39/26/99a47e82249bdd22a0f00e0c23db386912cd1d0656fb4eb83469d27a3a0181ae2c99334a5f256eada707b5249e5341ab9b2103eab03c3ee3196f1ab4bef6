{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport _regeneratorRuntime from \"/home/smoke/\\xC1rea de Trabalho/dashgo/node_modules/next/node_modules/@babel/runtime/regenerator\";\nimport _defineProperty from \"/home/smoke/\\xC1rea de Trabalho/dashgo/node_modules/next/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _asyncToGenerator from \"/home/smoke/\\xC1rea de Trabalho/dashgo/node_modules/next/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _jsxFileName = \"/home/smoke/\\xC1rea de Trabalho/dashgo/src/pages/cards/create.tsx\",\n    _s = $RefreshSig$();\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { Box, Flex, Heading, Divider, SimpleGrid } from '@chakra-ui/react';\nimport { VStack, HStack, Button } from '@chakra-ui/react';\nimport { useForm } from 'react-hook-form';\nimport * as yup from 'yup';\nimport { yupResolver } from '@hookform/resolvers/yup';\nimport { useMutation } from 'react-query';\nimport { useRouter } from 'next/router';\nimport { Header } from '../../components/Header';\nimport { Sidebar } from '../../components/Sidebar';\nimport { Input } from '../../components/Form/Input';\nimport { api } from '../../services/api';\nimport { queryClient } from '../../services/queryClient';\nvar createUserSchema = yup.object().shape({\n  name: yup.string().required(\"Nome obrigatório\"),\n  email: yup.string().required(\"E-mail obrigatório\").email(\"E-mail inválido\"),\n  password: yup.string().required(\"Senha não informada\").min(6, 'Digite ao menos 6 letras ou números'),\n  psw_confirmation: yup.string().oneOf([null, yup.ref('password')], \"As senhas diferem\")\n});\nexport default function CreateUser() {\n  _s();\n\n  var router = useRouter();\n  var createUser = useMutation( /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(user) {\n      var response;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return api.post('users', {\n                user: _objectSpread(_objectSpread({}, user), {}, {\n                  created_at: new Date()\n                })\n              });\n\n            case 2:\n              response = _context.sent;\n              return _context.abrupt(\"return\", response.data.user);\n\n            case 4:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function (_x) {\n      return _ref.apply(this, arguments);\n    };\n  }(), {\n    onSuccess: function onSuccess() {\n      queryClient.invalidateQueries('users');\n    }\n  });\n\n  var _useForm = useForm({\n    resolver: yupResolver(createUserSchema)\n  }),\n      register = _useForm.register,\n      handleSubmit = _useForm.handleSubmit,\n      formState = _useForm.formState;\n\n  var errors = formState.errors; //const handleCreateUser: SubmitHandler<CreateUserFormData) = (values) => {\n\n  function handleCreateUser(_x2) {\n    return _handleCreateUser.apply(this, arguments);\n  }\n\n  function _handleCreateUser() {\n    _handleCreateUser = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(values) {\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.next = 2;\n              return createUser.mutateAsync(values);\n\n            case 2:\n              router.push('/users'); //volta para a listagem de usuários\n\n            case 3:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n    return _handleCreateUser.apply(this, arguments);\n  }\n\n  return /*#__PURE__*/_jsxDEV(Box, {\n    children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 10\n    }, this), /*#__PURE__*/_jsxDEV(Flex, {\n      w: \"100%\",\n      my: \"6\",\n      maxWidth: 1480,\n      mx: \"auto\",\n      px: \"6\",\n      children: [/*#__PURE__*/_jsxDEV(Sidebar, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Box, {\n        as: \"form\",\n        flex: \"1\",\n        borderRadius: 8,\n        bg: \"gray.800\",\n        p: [\"4\", \"8\"],\n        onSubmit: handleSubmit(handleCreateUser),\n        children: [/*#__PURE__*/_jsxDEV(Heading, {\n          size: \"lg\",\n          fontWeight: \"normal\",\n          children: \"Criar usu\\xE1rio\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 16\n        }, this), /*#__PURE__*/_jsxDEV(Divider, {\n          my: \"6\",\n          borderColor: \"gray.700\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 16\n        }, this), /*#__PURE__*/_jsxDEV(VStack, {\n          spacing: \"8\",\n          children: [/*#__PURE__*/_jsxDEV(SimpleGrid, {\n            minChildWidth: \"240px\",\n            spacing: [\"4\", \"8\"],\n            w: \"100%\",\n            children: [/*#__PURE__*/_jsxDEV(Input, _objectSpread({\n              name: \"name\",\n              label: \"Nome completo\",\n              error: errors.name\n            }, register('name')), void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 80,\n              columnNumber: 22\n            }, this), /*#__PURE__*/_jsxDEV(Input, _objectSpread({\n              name: \"email\",\n              label: \"E-mail\",\n              error: errors.email\n            }, register('email')), void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 86,\n              columnNumber: 22\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 79,\n            columnNumber: 19\n          }, this), /*#__PURE__*/_jsxDEV(SimpleGrid, {\n            minChildWidth: \"240px\",\n            spacing: [\"4\", \"8\"],\n            w: \"100%\",\n            children: [/*#__PURE__*/_jsxDEV(Input, _objectSpread({\n              name: \"password\",\n              type: \"password\",\n              label: \"Senha\",\n              error: errors.password\n            }, register('password')), void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 95,\n              columnNumber: 22\n            }, this), /*#__PURE__*/_jsxDEV(Input, _objectSpread({\n              name: \"psw_confirmation\",\n              type: \"password\",\n              label: \"Confirma\\xE7\\xE3o da senha\",\n              error: errors.psw_confirmation\n            }, register('psw_confirmation')), void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 102,\n              columnNumber: 22\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 94,\n            columnNumber: 19\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 16\n        }, this), /*#__PURE__*/_jsxDEV(Flex, {\n          mt: \"8\",\n          justify: \"flex-end\",\n          children: /*#__PURE__*/_jsxDEV(HStack, {\n            spacing: \"4\",\n            children: [/*#__PURE__*/_jsxDEV(Button, {\n              as: \"a\",\n              colorScheme: \"whiteAlpha\",\n              href: \"/users\",\n              children: \"Cancelar\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 114,\n              columnNumber: 22\n            }, this), /*#__PURE__*/_jsxDEV(Button, {\n              type: \"submit\",\n              isLoading: formState.isSubmitting,\n              colorScheme: \"messenger\",\n              children: \"Salvar\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 120,\n              columnNumber: 22\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 113,\n            columnNumber: 19\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 16\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 10\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 7\n  }, this);\n}\n\n_s(CreateUser, \"lkT+O/dO3w2N0GwJlWejBWnQ8WI=\", false, function () {\n  return [useRouter, useMutation, useForm];\n});\n\n_c = CreateUser;\n\nvar _c;\n\n$RefreshReg$(_c, \"CreateUser\");","map":{"version":3,"sources":["/home/smoke/Área de Trabalho/dashgo/src/pages/cards/create.tsx"],"names":["Box","Flex","Heading","Divider","SimpleGrid","VStack","HStack","Button","useForm","yup","yupResolver","useMutation","useRouter","Header","Sidebar","Input","api","queryClient","createUserSchema","object","shape","name","string","required","email","password","min","psw_confirmation","oneOf","ref","CreateUser","router","createUser","user","post","created_at","Date","response","data","onSuccess","invalidateQueries","resolver","register","handleSubmit","formState","errors","handleCreateUser","values","mutateAsync","push","isSubmitting"],"mappings":"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","sourcesContent":["import { Box, Flex, Heading, Divider, SimpleGrid } from '@chakra-ui/react'\nimport { VStack, HStack, Button } from '@chakra-ui/react'\nimport { SubmitHandler, useForm } from 'react-hook-form'\nimport * as yup from 'yup'\nimport { yupResolver } from '@hookform/resolvers/yup'\nimport { useMutation } from 'react-query'\nimport { useRouter } from 'next/router'\n\nimport { Header } from '../../components/Header'\nimport { Sidebar } from '../../components/Sidebar'\nimport { Input } from '../../components/Form/Input'\nimport { api } from '../../services/api'\nimport { queryClient } from '../../services/queryClient'\n\ntype CreateUserFormData = {\n   name: string\n   email: string\n   password: string\n   pasw_confirmation: string\n }\n \n const createUserSchema = yup.object().shape({\n   name: yup.string().required(\"Nome obrigatório\"),\n   email: yup.string().required(\"E-mail obrigatório\").email(\"E-mail inválido\"),\n   password: yup.string().required(\"Senha não informada\").min(6, 'Digite ao menos 6 letras ou números'),\n   psw_confirmation: yup.string().oneOf([null, yup.ref('password')], \"As senhas diferem\")\n })\n \nexport default function CreateUser() {\n   const router = useRouter()\n   \n   const createUser = useMutation(async (user: CreateUserFormData) => {\n      const response = await api.post('users', {\n         user: {\n            ...user,\n            created_at: new Date(),\n         }\n      })\n\n      return response.data.user\n   }, {\n      onSuccess: () => {\n         queryClient.invalidateQueries('users')\n      }\n   })\n\n   const { register, handleSubmit, formState } = useForm({\n      resolver: yupResolver(createUserSchema)\n    })\n  \n   const errors = formState.errors\n\n   //const handleCreateUser: SubmitHandler<CreateUserFormData) = (values) => {\n   async function handleCreateUser(values: CreateUserFormData) {\n      await createUser.mutateAsync(values)\n\n      router.push('/users') //volta para a listagem de usuários\n   }\n\n   return (\n      <Box>\n         <Header />\n\n         <Flex w=\"100%\" my=\"6\" maxWidth={1480} mx=\"auto\" px=\"6\">\n            <Sidebar />        \n\n            <Box \n               as=\"form\"\n               flex=\"1\" \n               borderRadius={8} \n               bg=\"gray.800\" \n               p={[\"4\", \"8\"]}\n               onSubmit={handleSubmit(handleCreateUser)}\n            >\n               <Heading size=\"lg\" fontWeight=\"normal\">Criar usuário</Heading>\n               <Divider my=\"6\" borderColor=\"gray.700\" />\n\n               <VStack spacing=\"8\">\n                  <SimpleGrid minChildWidth=\"240px\" spacing={[\"4\", \"8\"]} w=\"100%\">\n                     <Input \n                        name=\"name\" \n                        label=\"Nome completo\" \n                        error={ errors.name }\n                        {...register('name')}\n                     />\n                     <Input \n                        name=\"email\" \n                        label=\"E-mail\" \n                        error={ errors.email }\n                        {...register('email')}\n                     />\n                  </SimpleGrid>\n\n                  <SimpleGrid minChildWidth=\"240px\" spacing={[\"4\", \"8\"]} w=\"100%\">\n                     <Input \n                        name=\"password\" \n                        type=\"password\" \n                        label=\"Senha\" \n                        error={ errors.password }\n                        {...register('password')}\n                     />\n                     <Input \n                        name=\"psw_confirmation\" \n                        type=\"password\" \n                        label=\"Confirmação da senha\" \n                        error={ errors.psw_confirmation }\n                        {...register('psw_confirmation')}\n                     />\n                  </SimpleGrid>\n               </VStack>\n\n               <Flex mt=\"8\" justify=\"flex-end\">\n                  <HStack spacing=\"4\">\n                     <Button as=\"a\" \n                        colorScheme=\"whiteAlpha\"\n                        href=\"/users\"\n                     >\n                        Cancelar\n                     </Button>\n                     <Button \n                        type=\"submit\" \n                        isLoading={formState.isSubmitting}\n                        colorScheme=\"messenger\"\n                     >\n                        Salvar\n                     </Button>\n                  </HStack>\n               </Flex>\n            </Box>               \n         </Flex>\n      </Box>\n   )\n}\n"]},"metadata":{},"sourceType":"module"}