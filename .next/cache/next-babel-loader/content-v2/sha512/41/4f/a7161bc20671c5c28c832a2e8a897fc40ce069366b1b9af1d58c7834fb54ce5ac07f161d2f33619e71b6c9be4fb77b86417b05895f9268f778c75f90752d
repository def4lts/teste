{"ast":null,"code":"import { useQuery } from \"react-query\";\nimport { api } from \"../api\";\n\nasync function getUsers(page) {\n  //const response = await fetch('http://localhost:3000/api/users')\n  //const data = await response.json()\n  const {\n    data,\n    headers\n  } = await api.get(\"/clients\", {\n    params: {\n      page\n    }\n  });\n  const totalCount = Number(headers[\"x-total-count\"]);\n  const users = data.users.map(user => {\n    return {\n      id: user.id,\n      name: user.name,\n      email: user.email,\n      created_at: new Date(user.created_at).toLocaleDateString(\"pt-BR\", {\n        day: \"2-digit\",\n        month: \"long\",\n        year: \"numeric\"\n      })\n    };\n  });\n  return {\n    users,\n    totalCount\n  };\n}\n\nexport function useUsers(page) {\n  //return useQuery('users', () => getUsers(page), {\n  return useQuery([\"users\", page], () => getUsers(page), {\n    staleTime: 1000 * 60 * 10 //10 minutos\n\n  });\n} // Esse 3.o parâmetro staleTime é opcional.\n// Se for informado, define o tempo que o react-query\n// vai buscar novamente os dados. No caso, após 5 seg.\n// Antes de 5 segundos, os dados são considerados \"Fresh\".\n// Após 5 seg, são considerados stale (antigo), e faz refresh.","map":{"version":3,"sources":["/home/smoke/Área de Trabalho/dashgo/src/services/hooks/useUsers.ts"],"names":["useQuery","api","getUsers","page","data","headers","get","params","totalCount","Number","users","map","user","id","name","email","created_at","Date","toLocaleDateString","day","month","year","useUsers","staleTime"],"mappings":"AAAA,SAASA,QAAT,QAAyB,aAAzB;AACA,SAASC,GAAT,QAAoB,QAApB;;AAcA,eAAeC,QAAf,CAAwBC,IAAxB,EAA8D;AAC5D;AACA;AACA,QAAM;AAAEC,IAAAA,IAAF;AAAQC,IAAAA;AAAR,MAAoB,MAAMJ,GAAG,CAACK,GAAJ,CAAQ,UAAR,EAAoB;AAClDC,IAAAA,MAAM,EAAE;AAAEJ,MAAAA;AAAF;AAD0C,GAApB,CAAhC;AAIA,QAAMK,UAAU,GAAGC,MAAM,CAACJ,OAAO,CAAC,eAAD,CAAR,CAAzB;AAEA,QAAMK,KAAK,GAAGN,IAAI,CAACM,KAAL,CAAWC,GAAX,CAAgBC,IAAD,IAAU;AACrC,WAAO;AACLC,MAAAA,EAAE,EAAED,IAAI,CAACC,EADJ;AAELC,MAAAA,IAAI,EAAEF,IAAI,CAACE,IAFN;AAGLC,MAAAA,KAAK,EAAEH,IAAI,CAACG,KAHP;AAILC,MAAAA,UAAU,EAAE,IAAIC,IAAJ,CAASL,IAAI,CAACI,UAAd,EAA0BE,kBAA1B,CAA6C,OAA7C,EAAsD;AAChEC,QAAAA,GAAG,EAAE,SAD2D;AAEhEC,QAAAA,KAAK,EAAE,MAFyD;AAGhEC,QAAAA,IAAI,EAAE;AAH0D,OAAtD;AAJP,KAAP;AAUD,GAXa,CAAd;AAaA,SAAO;AACLX,IAAAA,KADK;AAELF,IAAAA;AAFK,GAAP;AAID;;AAED,OAAO,SAASc,QAAT,CAAkBnB,IAAlB,EAAgC;AACrC;AACA,SAAOH,QAAQ,CAAC,CAAC,OAAD,EAAUG,IAAV,CAAD,EAAkB,MAAMD,QAAQ,CAACC,IAAD,CAAhC,EAAwC;AACrDoB,IAAAA,SAAS,EAAE,OAAO,EAAP,GAAY,EAD8B,CAC1B;;AAD0B,GAAxC,CAAf;AAGD,C,CAED;AACA;AACA;AACA;AACA","sourcesContent":["import { useQuery } from \"react-query\";\nimport { api } from \"../api\";\n\ntype User = {\n  id: string;\n  name: string;\n  email: string;\n  created_at: string;\n};\n\ntype UsersResponse = {\n  totalCount: number;\n  users: User[];\n};\n\nasync function getUsers(page: number): Promise<UsersResponse> {\n  //const response = await fetch('http://localhost:3000/api/users')\n  //const data = await response.json()\n  const { data, headers } = await api.get(\"/clients\", {\n    params: { page },\n  });\n\n  const totalCount = Number(headers[\"x-total-count\"]);\n\n  const users = data.users.map((user) => {\n    return {\n      id: user.id,\n      name: user.name,\n      email: user.email,\n      created_at: new Date(user.created_at).toLocaleDateString(\"pt-BR\", {\n        day: \"2-digit\",\n        month: \"long\",\n        year: \"numeric\",\n      }),\n    };\n  });\n\n  return {\n    users,\n    totalCount,\n  };\n}\n\nexport function useUsers(page: number) {\n  //return useQuery('users', () => getUsers(page), {\n  return useQuery([\"users\", page], () => getUsers(page), {\n    staleTime: 1000 * 60 * 10, //10 minutos\n  });\n}\n\n// Esse 3.o parâmetro staleTime é opcional.\n// Se for informado, define o tempo que o react-query\n// vai buscar novamente os dados. No caso, após 5 seg.\n// Antes de 5 segundos, os dados são considerados \"Fresh\".\n// Após 5 seg, são considerados stale (antigo), e faz refresh.\n"]},"metadata":{},"sourceType":"module"}