{"ast":null,"code":"import { useQuery } from \"react-query\";\nimport { api } from \"../api\";\n\nasync function getProducts(page) {\n  //const response = await fetch('http://localhost:3000/api/users')\n  //const data = await response.json()\n  const {\n    data\n  } = await api.get(`/products/${page}`);\n  const totalCount = Number(data.total);\n  const products = data.products.map(product => {\n    return {\n      id: product.id,\n      sold: product.sold,\n      number: product.number,\n      month: product.month,\n      year: product.year,\n      cvv: product.cvv,\n      category_id: product.category_id,\n      created_at: new Date(product.created_at).toLocaleDateString(\"pt-BR\", {\n        day: \"2-digit\",\n        month: \"long\",\n        year: \"numeric\"\n      })\n    };\n  });\n  return {\n    products,\n    totalCount\n  };\n}\n\nexport function useProducts(page) {\n  return useQuery([\"product\", page], () => getProducts(page), {\n    staleTime: 1000\n  });\n}","map":{"version":3,"sources":["/home/smoke/√Årea de Trabalho/dashgo/src/services/hooks/useProducts.ts"],"names":["useQuery","api","getProducts","page","data","get","totalCount","Number","total","products","map","product","id","sold","number","month","year","cvv","category_id","created_at","Date","toLocaleDateString","day","useProducts","staleTime"],"mappings":"AAAA,SAASA,QAAT,QAAyB,aAAzB;AACA,SAASC,GAAT,QAAoB,QAApB;;AAkBA,eAAeC,WAAf,CAA2BC,IAA3B,EAAiE;AAC/D;AACA;AACA,QAAM;AAAEC,IAAAA;AAAF,MAAW,MAAMH,GAAG,CAACI,GAAJ,CAAS,aAAYF,IAAK,EAA1B,CAAvB;AAEA,QAAMG,UAAU,GAAGC,MAAM,CAACH,IAAI,CAACI,KAAN,CAAzB;AAEA,QAAMC,QAAQ,GAAGL,IAAI,CAACK,QAAL,CAAcC,GAAd,CAAmBC,OAAD,IAAsB;AACvD,WAAO;AACLC,MAAAA,EAAE,EAAED,OAAO,CAACC,EADP;AAELC,MAAAA,IAAI,EAAEF,OAAO,CAACE,IAFT;AAGLC,MAAAA,MAAM,EAAEH,OAAO,CAACG,MAHX;AAILC,MAAAA,KAAK,EAAEJ,OAAO,CAACI,KAJV;AAKLC,MAAAA,IAAI,EAAEL,OAAO,CAACK,IALT;AAMLC,MAAAA,GAAG,EAAEN,OAAO,CAACM,GANR;AAOLC,MAAAA,WAAW,EAAEP,OAAO,CAACO,WAPhB;AAQLC,MAAAA,UAAU,EAAE,IAAIC,IAAJ,CAAST,OAAO,CAACQ,UAAjB,EAA6BE,kBAA7B,CAAgD,OAAhD,EAAyD;AACnEC,QAAAA,GAAG,EAAE,SAD8D;AAEnEP,QAAAA,KAAK,EAAE,MAF4D;AAGnEC,QAAAA,IAAI,EAAE;AAH6D,OAAzD;AARP,KAAP;AAcD,GAfgB,CAAjB;AAiBA,SAAO;AACLP,IAAAA,QADK;AAELH,IAAAA;AAFK,GAAP;AAID;;AAED,OAAO,SAASiB,WAAT,CAAqBpB,IAArB,EAAmC;AACxC,SAAOH,QAAQ,CAAC,CAAC,SAAD,EAAYG,IAAZ,CAAD,EAAoB,MAAMD,WAAW,CAACC,IAAD,CAArC,EAA6C;AAC1DqB,IAAAA,SAAS,EAAE;AAD+C,GAA7C,CAAf;AAGD","sourcesContent":["import { useQuery } from \"react-query\";\nimport { api } from \"../api\";\n\ntype Product = {\n  id: string;\n  sold: boolean;\n  number: string;\n  month: string;\n  year: string;\n  cvv: string;\n  category_id: string;\n  created_at: string;\n};\n\ntype UsersResponse = {\n  totalCount: number;\n  products: Product[];\n};\n\nasync function getProducts(page: number): Promise<UsersResponse> {\n  //const response = await fetch('http://localhost:3000/api/users')\n  //const data = await response.json()\n  const { data } = await api.get(`/products/${page}`);\n\n  const totalCount = Number(data.total);\n\n  const products = data.products.map((product: Product) => {\n    return {\n      id: product.id,\n      sold: product.sold,\n      number: product.number,\n      month: product.month,\n      year: product.year,\n      cvv: product.cvv,\n      category_id: product.category_id,\n      created_at: new Date(product.created_at).toLocaleDateString(\"pt-BR\", {\n        day: \"2-digit\",\n        month: \"long\",\n        year: \"numeric\",\n      }),\n    };\n  });\n\n  return {\n    products,\n    totalCount,\n  };\n}\n\nexport function useProducts(page: number) {\n  return useQuery([\"product\", page], () => getProducts(page), {\n    staleTime: 1000,\n  });\n}\n"]},"metadata":{},"sourceType":"module"}