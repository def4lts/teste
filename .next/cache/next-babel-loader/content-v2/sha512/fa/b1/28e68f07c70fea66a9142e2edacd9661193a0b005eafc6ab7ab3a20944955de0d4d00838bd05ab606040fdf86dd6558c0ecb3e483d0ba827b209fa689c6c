{"ast":null,"code":"import axios from \"axios\";\nimport { parseCookies, setCookie } from \"nookies\";\nimport { signOut } from \"../contexts/AuthContext\";\nlet cookies = parseCookies();\nlet isRefreshing = false;\nlet failedRequestQueue = [];\nexport const api = axios.create({\n  baseURL: \"http://54.94.41.183:3333\",\n  headers: {\n    Authorization: `Bearer ${cookies[\"0dayTokenFront.token\"]}`\n  }\n});\napi.interceptors.response.use(response => {\n  return response;\n}, error => {\n  if (error.response.status === 401) {\n    var _error$response$data;\n\n    if (((_error$response$data = error.response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.code) === \"token.expired\") {\n      cookies = parseCookies();\n      const {\n        \"0dayTokenFront.cookies\": refreshToken\n      } = cookies;\n      const originalConfig = error.config;\n\n      if (!isRefreshing) {\n        isRefreshing = true;\n        api.post(\"/refresh-token\", {\n          token: refreshToken\n        }).then(response => {\n          const {\n            token\n          } = response.data;\n          setCookie(undefined, \"0dayTokenFront.token\", token, {\n            maxAge: 60 * 60 * 24 * 30,\n            //30 days\n            path: \"/\"\n          });\n          setCookie(undefined, \"0dayTokenFront.refreshToken\", response.data.refreshToken, {\n            maxAge: 60 * 60 * 24 * 30,\n            //30 days\n            path: \"/\"\n          });\n          api.defaults.headers[\"Authorization\"] = `Bearer ${token}`;\n          failedRequestQueue.forEach(request => request.onSuccess(token));\n          failedRequestQueue = [];\n        }).catch(err => {\n          failedRequestQueue.forEach(request => request.onFailure(err));\n          failedRequestQueue = [];\n        }).finally(() => {\n          isRefreshing = false;\n        });\n      }\n\n      return new Promise((resolve, reject) => {\n        failedRequestQueue.push({\n          onSuccess: token => {\n            originalConfig.headers[\"Authorization\"] = `Bearer ${token}`;\n            resolve(api(originalConfig));\n          },\n          onFailure: err => {\n            reject(err);\n          }\n        });\n      });\n    } else {\n      signOut();\n    }\n  }\n\n  return Promise.reject();\n});","map":null,"metadata":{},"sourceType":"module"}