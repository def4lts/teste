{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { Stack, HStack, Text, Box } from \"@chakra-ui/react\";\nimport { useMemo } from \"react\";\nimport { Page } from \"./Page\";\nvar siblingsCount = 1; // 1 página anterior + 1 página posterior\n\nfunction generatePagesArray(from, to) {\n  var qtItens = to - from;\n  var array = [];\n\n  if (to > from) {\n    for (var i = 0; i < qtItens; i++) {\n      array.push(from + i + 1);\n    }\n  }\n\n  return array;\n}\n\nexport function Pagination(_ref) {\n  var totalCountOfRegisters = _ref.totalCountOfRegisters,\n      _ref$registersPerPage = _ref.registersPerPage,\n      registersPerPage = _ref$registersPerPage === void 0 ? 10 : _ref$registersPerPage,\n      _ref$currentPage = _ref.currentPage,\n      currentPage = _ref$currentPage === void 0 ? 1 : _ref$currentPage,\n      onPageChange = _ref.onPageChange;\n  var lastPage = useMemo(function () {\n    return Math.ceil(totalCountOfRegisters / registersPerPage);\n  }, [totalCountOfRegisters, registersPerPage]);\n  var previousPages = useMemo(function () {\n    return currentPage > 1 ? generatePagesArray(currentPage - 1 - siblingsCount, currentPage - 1) : [];\n  }, [currentPage]);\n  var nextPages = useMemo(function () {\n    return currentPage < lastPage ? generatePagesArray(currentPage, Math.min(currentPage + siblingsCount, lastPage)) : [];\n  }, [currentPage]);\n  return /*#__PURE__*/_jsxs(Stack, {\n    direction: [\"column\", \"row\"],\n    mt: \"8\",\n    justify: \"space-between\",\n    align: \"center\",\n    spacing: \"6\",\n    children: [/*#__PURE__*/_jsxs(Box, {\n      children: [/*#__PURE__*/_jsx(\"strong\", {\n        children: \"0\"\n      }), \" - \", /*#__PURE__*/_jsx(\"strong\", {\n        children: \"10\"\n      }), \" de\", \" \", /*#__PURE__*/_jsx(\"strong\", {\n        children: totalCountOfRegisters\n      })]\n    }), /*#__PURE__*/_jsxs(HStack, {\n      spacing: \"2\",\n      children: [currentPage > 1 + siblingsCount && /*#__PURE__*/_jsxs(_Fragment, {\n        children: [/*#__PURE__*/_jsx(Page, {\n          onPageChange: onPageChange,\n          number: 1\n        }), currentPage > 2 + siblingsCount && /*#__PURE__*/_jsx(Text, {\n          color: \"gray.300\",\n          width: \"8\",\n          textAlign: \"center\",\n          children: \"...\"\n        })]\n      }), previousPages.length > 0 && previousPages.map(function (page) {\n        return /*#__PURE__*/_jsx(Page, {\n          onPageChange: onPageChange,\n          number: page\n        }, page);\n      }), /*#__PURE__*/_jsx(Page, {\n        onPageChange: onPageChange,\n        number: currentPage,\n        isCurrent: true\n      }), nextPages.length > 0 && nextPages.map(function (page) {\n        return /*#__PURE__*/_jsx(Page, {\n          onPageChange: onPageChange,\n          number: page\n        }, page);\n      }), currentPage + siblingsCount < lastPage && /*#__PURE__*/_jsxs(_Fragment, {\n        children: [currentPage + 1 + siblingsCount < lastPage && /*#__PURE__*/_jsx(Text, {\n          color: \"gray.300\",\n          width: \"8\",\n          textAlign: \"center\",\n          children: \"...\"\n        }), /*#__PURE__*/_jsx(Page, {\n          onPageChange: onPageChange,\n          number: lastPage\n        })]\n      })]\n    })]\n  });\n}","map":null,"metadata":{},"sourceType":"module"}