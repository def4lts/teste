{"ast":null,"code":"import { jsx as _jsx } from \"react/jsx-runtime\";\nimport { useEffect, useRef } from \"react\";\nexport function Matrix({\n  timeout = 50\n}) {\n  const canvasRef = useRef(null);\n  useEffect(() => {\n    if (canvasRef.current) {\n      const canvas = canvasRef.current;\n      const context = canvas.getContext(\"2d\");\n      const width = document.body.offsetWidth;\n      const height = document.body.offsetHeight;\n      canvas.width = width;\n      canvas.height = height;\n      context.fillStyle = \"#8888\";\n      context.fillRect(0, 0, width, height);\n      const columns = Math.floor(width / 20) + 1;\n      const yPositions = Array.from({\n        length: columns\n      }).fill(0);\n      context.fillStyle = \"#8888\";\n      context.fillRect(0, 0, width, height);\n\n      const matrixEffect = () => {\n        context.fillStyle = \"#0001\";\n        context.fillRect(0, 0, width, height);\n        context.fillStyle = \"#3ca300\";\n        context.font = \"8pt monospace\";\n        yPositions.forEach((y, index) => {\n          const text = String.fromCharCode(Math.random() * 128);\n          const x = index * 20;\n          context.fillText(text, x, y);\n\n          if (y > 100 + Math.random() * 10000) {\n            yPositions[index] = 0;\n          } else {\n            yPositions[index] = y + 20;\n          }\n        });\n      };\n\n      const interval = setInterval(matrixEffect, timeout);\n      return () => {\n        clearInterval(interval);\n      };\n    }\n  }, [canvasRef, timeout]);\n  return /*#__PURE__*/_jsx(\"canvas\", {\n    width: 0,\n    height: 0,\n    ref: canvasRef\n  });\n}","map":null,"metadata":{},"sourceType":"module"}