{"ast":null,"code":"import _regeneratorRuntime from \"/home/smoke/\\xC1rea de Trabalho/dashgo/node_modules/next/node_modules/@babel/runtime/regenerator\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport _asyncToGenerator from \"/home/smoke/\\xC1rea de Trabalho/dashgo/node_modules/next/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { createContext, useEffect, useState } from \"react\";\nimport { api } from \"../services/api\";\nimport Router from \"next/router\";\nimport { destroyCookie, parseCookies, setCookie } from \"nookies\";\nexport var AuthContext = /*#__PURE__*/createContext({});\nexport function signOut() {\n  destroyCookie(undefined, \"0dayTokenFront.token\");\n  destroyCookie(undefined, \"0dayTokenFront.refreshToken\");\n  Router.push(\"/\");\n}\nexport function AuthProvider(_ref) {\n  var children = _ref.children;\n\n  var _useState = useState(),\n      user = _useState[0],\n      setUser = _useState[1];\n\n  var isAuthenticated = !!user;\n  useEffect(function () {\n    var _parseCookies = parseCookies(),\n        token = _parseCookies[\"0dayTokenFront.token\"];\n\n    if (token) {\n      api.get(\"/users/view\").then(function (response) {\n        var _response$data = response.data,\n            id = _response$data.id,\n            name = _response$data.name,\n            username = _response$data.username,\n            avatarUrl = _response$data.avatarUrl;\n        setUser({\n          id: id,\n          name: name,\n          username: username,\n          avatarUrl: avatarUrl\n        });\n      })[\"catch\"](function () {\n        signOut();\n      });\n    }\n  }, []);\n\n  function signIn(_x) {\n    return _signIn.apply(this, arguments);\n  }\n\n  function _signIn() {\n    _signIn = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(_ref2) {\n      var username, password, response, _response$data2, token, refreshToken, userDate, _userDate$data, name, id, avatarUrl;\n\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              username = _ref2.username, password = _ref2.password;\n              _context.prev = 1;\n              _context.next = 4;\n              return api.post(\"/sessions\", {\n                username: username,\n                password: password\n              });\n\n            case 4:\n              response = _context.sent;\n              _response$data2 = response.data, token = _response$data2.token, refreshToken = _response$data2.refreshToken;\n              setCookie(undefined, \"0dayTokenFront.token\", token, {\n                maxAge: 60 * 60 * 24 * 30,\n                //30 days\n                path: \"/\"\n              });\n              setCookie(undefined, \"0dayTokenFront.refreshToken\", refreshToken, {\n                maxAge: 60 * 60 * 24 * 30,\n                //30 days\n                path: \"/\"\n              });\n              api.defaults.headers[\"Authorization\"] = \"Bearer \".concat(token);\n              _context.next = 11;\n              return api.get(\"/users/view\");\n\n            case 11:\n              userDate = _context.sent;\n              _userDate$data = userDate.data, name = _userDate$data.name, id = _userDate$data.id, avatarUrl = _userDate$data.avatarUrl;\n              setUser({\n                id: id,\n                name: name,\n                username: username,\n                avatarUrl: avatarUrl\n              });\n              Router.push(\"/dashboard\");\n              _context.next = 20;\n              break;\n\n            case 17:\n              _context.prev = 17;\n              _context.t0 = _context[\"catch\"](1);\n              console.log(_context.t0);\n\n            case 20:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[1, 17]]);\n    }));\n    return _signIn.apply(this, arguments);\n  }\n\n  return /*#__PURE__*/_jsx(AuthContext.Provider, {\n    value: {\n      signIn: signIn,\n      isAuthenticated: isAuthenticated,\n      user: user\n    },\n    children: children\n  });\n}","map":null,"metadata":{},"sourceType":"module"}